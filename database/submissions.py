import aiosqlite
import json
import logging
from pathlib import Path
from typing import Optional
from config import DB_SUBMISSIONS_PATH

logger = logging.getLogger(__name__)


class SubmissionDB:
    _instance = None  # –ö–ª–∞—Å—Å–æ–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è Singleton

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if not hasattr(self, 'initialized'):
            self.db_path: Path = Path(DB_SUBMISSIONS_PATH)
            self.connection: Optional[aiosqlite.Connection] = None
            self.ensure_db_directory()
            self.initialized = True

    def ensure_db_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –ë–î: {self.db_path.parent}")

    async def init(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        """
        if self.connection is None:  # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
            logger.info(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {self.db_path}")
            self.connection = await aiosqlite.connect(str(self.db_path))
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
            await self._create_tables()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É submissions"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã submissions...")
        await self.connection.execute('''
            CREATE TABLE IF NOT EXISTS submissions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                text_content TEXT,
                file_ids TEXT,
                status TEXT DEFAULT 'new',
                admin_response TEXT,
                processed_at TEXT,
                viewed_at TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await self.connection.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ submissions —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

    async def add_submission(self, user_id: int, username: str, text: str, file_ids: list[str]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –ë–î"""
        if self.connection is None:
            logger.error("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:")
        logger.info(f"   üë§ User ID: {user_id}")
        logger.info(f"   üë§ Username: {username}")
        logger.info(
            f"   üìù Text: '{text}' (—Ç–∏–ø: {type(text)}, –¥–ª–∏–Ω–∞: {len(text) if text else 0})")
        logger.info(f"   üìÅ Files: {file_ids}")
        logger.info(f"   üîó Connection status: {self.connection is not None}")

        try:
            async with self.connection.cursor() as cursor:
                logger.info("üìù –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å...")
                logger.info(
                    f"üìù SQL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id={user_id}, username='{username}', text='{text}', file_ids={json.dumps(file_ids)}")
                await cursor.execute(
                    '''INSERT INTO submissions 
                    (user_id, username, text_content, file_ids, status) 
                    VALUES (?, ?, ?, ?, 'new')''',
                    (user_id, username, text, json.dumps(file_ids))
                )
                logger.info("üíæ –í—ã–ø–æ–ª–Ω—è–µ–º commit...")
                await self.connection.commit()
                logger.info("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
            raise

    async def get_all_submissions(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î...")
        try:
            async with self.connection.cursor() as cursor:
                await cursor.execute('SELECT * FROM submissions ORDER BY created_at DESC')
                rows = await cursor.fetchall()
                rows_list = list(rows)
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows_list)}")
                return rows_list
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
            raise

    async def get_submissions_by_status(self, status: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'...")
        try:
            async with self.connection.cursor() as cursor:
                await cursor.execute(
                    'SELECT * FROM submissions WHERE status = ? ORDER BY created_at DESC',
                    (status,)
                )
                rows = await cursor.fetchall()
                rows_list = list(rows)
                logger.info(
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {len(rows_list)}")
                return rows_list
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É: {e}")
            raise

    async def get_submission_by_id(self, submission_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å ID {submission_id}...")
        try:
            async with self.connection.cursor() as cursor:
                await cursor.execute(
                    'SELECT * FROM submissions WHERE id = ?',
                    (submission_id,)
                )
                row = await cursor.fetchone()
                if row:
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —Å ID {submission_id} –Ω–∞–π–¥–µ–Ω–∞")
                    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {row}")
                    return row
                else:
                    logger.warning(
                        f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å ID {submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–æ ID: {e}")
            raise

    async def mark_as_viewed(self, submission_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info(f"üëÅÔ∏è –û—Ç–º–µ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {submission_id} –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π...")
        try:
            async with self.connection.cursor() as cursor:
                await cursor.execute(
                    '''UPDATE submissions 
                    SET status = 'viewed', viewed_at = CURRENT_TIMESTAMP 
                    WHERE id = ? AND status = 'new' ''',
                    (submission_id,)
                )
                await self.connection.commit()
                logger.info(
                    f"‚úÖ –ó–∞–ø–∏—Å—å {submission_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π: {e}")
            raise

    async def mark_as_solved(self, submission_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info(f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {submission_id} –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π...")
        try:
            async with self.connection.cursor() as cursor:
                await cursor.execute(
                    '''UPDATE submissions 
                    SET status = 'solved', processed_at = CURRENT_TIMESTAMP 
                    WHERE id = ?''',
                    (submission_id,)
                )
                await self.connection.commit()
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {submission_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–∞—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π: {e}")
            raise

    async def delete_submission(self, submission_id: int):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {submission_id}...")
        try:
            async with self.connection.cursor() as cursor:
                await cursor.execute(
                    'DELETE FROM submissions WHERE id = ?',
                    (submission_id,)
                )
                await self.connection.commit()
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {submission_id} —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            raise

    async def get_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–∏—Å—è–º"""
        if self.connection is None:
            raise RuntimeError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        try:
            async with self.connection.cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                await cursor.execute('SELECT COUNT(*) FROM submissions')
                total_row = await cursor.fetchone()
                total = total_row[0] if total_row else 0

                # –ù–æ–≤—ã–µ
                await cursor.execute("SELECT COUNT(*) FROM submissions WHERE status = 'new'")
                new_row = await cursor.fetchone()
                new_count = new_row[0] if new_row else 0

                # –†–µ—à–µ–Ω–Ω—ã–µ
                await cursor.execute("SELECT COUNT(*) FROM submissions WHERE status = 'solved'")
                solved_row = await cursor.fetchone()
                solved_count = solved_row[0] if solved_row else 0

                # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
                await cursor.execute("SELECT COUNT(*) FROM submissions WHERE status = 'viewed'")
                viewed_row = await cursor.fetchone()
                viewed_count = viewed_row[0] if viewed_row else 0

                stats = {
                    'total': total,
                    'new': new_count,
                    'solved': solved_count,
                    'viewed': viewed_count
                }

                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                return stats
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            raise

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        if hasattr(self, 'connection') and self.connection:
            await self.connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    async def __aenter__(self):
        await self.init()
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.close()
