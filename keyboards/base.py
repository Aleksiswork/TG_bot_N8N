"""
–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
"""
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from typing import List, Optional, Union
from config import config
from utils.checks import is_admin


def create_reply_keyboard(
    buttons: List[List[str]],
    resize_keyboard: bool = True,
    one_time_keyboard: bool = False,
    selective: bool = False
) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏

    Args:
        buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
        resize_keyboard: –ò–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        one_time_keyboard: –°–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        selective: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard_buttons = [[KeyboardButton(text=text)
                         for text in row] for row in buttons]

    return ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=resize_keyboard,
        one_time_keyboard=one_time_keyboard,
        selective=selective
    )


def create_inline_keyboard(
    buttons: List[List[dict]],
    row_width: int = 2
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    Args:
        buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        row_width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É

    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard_buttons = []

    for row in buttons:
        keyboard_row = []
        for button_data in row:
            keyboard_row.append(InlineKeyboardButton(**button_data))
        keyboard_buttons.append(keyboard_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        ReplyKeyboardMarkup: –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    buttons = [
        ["üìö –ì–∞–π–¥—ã", "üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
        ["‚ÑπÔ∏è –û –±–æ—Ç–µ"]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if is_admin(user_id):
        buttons.append(["‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"])

    return create_reply_keyboard(buttons)


def get_guides_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–∞–π–¥–∞–º–∏

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–∞–π–¥–æ–≤
    """
    buttons = [
        ["–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î", "–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen"],
        ["–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N", "–§–∏—à–∫–∏"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return create_reply_keyboard(buttons)


def get_feedback_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    """
    buttons = [
        ["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"],
        ["üìú –ò—Å—Ç–æ—Ä–∏—è"],
        ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
    ]
    return create_reply_keyboard(buttons)


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    Returns:
        ReplyKeyboardMarkup: –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    buttons = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∫—É"],
        ["üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)", "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"],
        ["üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return create_reply_keyboard(buttons)


def get_subscribe_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if not config.channel_link:
        return InlineKeyboardMarkup(inline_keyboard=[])

    buttons = [
        [
            InlineKeyboardButton(
                text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                url=config.channel_link
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="check_subscription"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_pagination_keyboard(
    current_page: int,
    total_pages: int,
    callback_prefix: str,
    extra_buttons: Optional[List[dict]] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
        extra_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    if current_page > 1:
        nav_buttons.append({
            "text": "‚óÄÔ∏è",
            "callback_data": f"{callback_prefix}_page_{current_page - 1}"
        })

    nav_buttons.append({
        "text": f"{current_page}/{total_pages}",
        "callback_data": "no_action"
    })

    if current_page < total_pages:
        nav_buttons.append({
            "text": "‚ñ∂Ô∏è",
            "callback_data": f"{callback_prefix}_page_{current_page + 1}"
        })

    if nav_buttons:
        buttons.append(nav_buttons)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if extra_buttons:
        buttons.extend(extra_buttons)

    return create_inline_keyboard(buttons)


def get_confirmation_keyboard(
    confirm_text: str = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
    cancel_text: str = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
    confirm_callback: str = "confirm",
    cancel_callback: str = "cancel"
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    Args:
        confirm_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cancel_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        confirm_callback: Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cancel_callback: Callback –¥–ª—è –æ—Ç–º–µ–Ω—ã

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    buttons = [
        [
            {"text": confirm_text, "callback_data": confirm_callback},
            {"text": cancel_text, "callback_data": cancel_callback}
        ]
    ]
    return create_inline_keyboard(buttons)
