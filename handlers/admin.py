from aiogram import Router, F, Bot, types
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto, InputMediaDocument
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from keyboards import get_admin_keyboard, get_bans_keyboard, get_ban_user_keyboard, get_unban_user_keyboard
from config import FILES_DIR, BOT_VERSION, ADMIN_IDS
from utils.checks import is_user_banned, ban_user, unban_user, get_ban_info, get_banned_db
from datetime import datetime
import os
import csv
import logging
import asyncio
from aiogram.types import ReplyKeyboardRemove
from database.submissions import SubmissionDB
import json
from typing import Union, Optional, Any
import platform

router = Router()
logger = logging.getLogger(__name__)
try:
    db = Database()
except Exception as e:
    db = None
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Database: {e}")
submission_db = SubmissionDB()


class BroadcastState(StatesGroup):
    waiting_message = State()


class SubmissionsViewState(StatesGroup):
    viewing_list = State()
    viewing_detail = State()
    waiting_response = State()
    confirm_delete = State()


# -------------------------------
# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------


@router.message(F.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
async def admin_panel(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())


@router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_handler(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    stats = await db.get_users_stats()
    hostname = platform.node()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (v{BOT_VERSION}):\n"
    stats_text += f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {hostname}\n"
    stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[0]}\n\n"
    stats_text += "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:\n"

    for user in stats[1]:
        stats_text += f"- {user[0]} (@{user[1]}) - {user[2][:10]}\n"

    await message.answer(stats_text)


@router.message(F.text == 'üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞')
async def version_handler(message: Message):
    """–ü–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return
    await message.answer(f"üîß –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {BOT_VERSION}")


@router.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
async def export_db_csv_handler(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    try:
        if db is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return
        users = await db.get_all_users()
        total_users = len(list(users))

        if not users:
            await message.answer("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        MAX_FILE_SIZE_MB = 45  # –õ–∏–º–∏—Ç Telegram
        BATCH_SIZE = 10000     # –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        batches = [list(users)[i:i + BATCH_SIZE]
                   for i in range(0, total_users, BATCH_SIZE)]
        sent_files = 0

        for i, batch in enumerate(batches, 1):
            temp_file = os.path.join(
                FILES_DIR, f"users_part{i}_{timestamp}.csv")

            try:
                # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ CSV
                with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
                    writer = csv.writer(
                        f, delimiter=';', quoting=csv.QUOTE_ALL)
                    writer.writerow(
                        ['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])
                    for user in batch:
                        writer.writerow([
                            user[0],
                            f'"{user[1]}"' if user[1] else '',
                            f'"{user[2]}"' if user[2] else '',
                            f'"{user[3]}"' if user[3] else '',
                            user[4],
                            user[5]
                        ])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                file_size_mb = os.path.getsize(temp_file) / (1024 * 1024)
                if file_size_mb > MAX_FILE_SIZE_MB:
                    logger.warning(
                        f"–§–∞–π–ª part{i} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç: {file_size_mb:.2f}MB")
                    await message.answer(f"‚ö†Ô∏è –§–∞–π–ª part{i} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f}MB)")
                    continue

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                await message.answer_document(
                    FSInputFile(temp_file),
                    caption=f"Part {i}/{len(batches)} ({len(batch)} users)"
                )
                sent_files += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ part{i}: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ part{i}: {str(e)}")

        if sent_files == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        else:
            await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_files}")

    except Exception as e:
        logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π')
async def view_submissions_handler(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö submissions"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    try:
        await submission_db.init()
        submissions = await submission_db.get_all_submissions()

        if not submissions:
            await message.answer("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö submissions –ø—É—Å—Ç–∞")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–∏—Å—è–º–∏
        submissions_list = list(submissions)
        response = f"üìã –ó–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ({len(submissions_list)} —à—Ç.):\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        for i, submission in enumerate(submissions_list[:10], 1):
            id_, user_id, username, text, file_ids, created_at = submission
            text_preview = text[:50] + "..." if len(text) > 50 else text
            files_count = len(json.loads(file_ids)) if file_ids else 0

            response += f"{i}. ID: {id_}\n"
            response += f"   üë§ User: {user_id} (@{username})\n"
            response += f"   üìù Text: {text_preview}\n"
            response += f"   üìÅ Files: {files_count}\n"
            response += f"   üìÖ Date: {created_at}\n\n"

        if len(submissions_list) > 10:
            response += f"... –∏ –µ—â—ë {len(submissions_list) - 10} –∑–∞–ø–∏—Å–µ–π"

        await message.answer(response, reply_markup=get_admin_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_keyboard())


async def send_submissions_menu(message: Union[Message, CallbackQuery, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await submission_db.init()
        stats = await submission_db.get_statistics()

        response = f"üìã –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n\n"
        response += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}\n"
        response += f"‚Ä¢ –ù–æ–≤—ã–µ: {stats['new']}\n"
        response += f"‚Ä¢ –†–µ—à–µ–Ω–Ω—ã–µ: {stats['solved']}\n"
        response += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: {stats['viewed']}\n\n"
        response += f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="submissions_all"),
                    InlineKeyboardButton(
                        text="üÜï –ù–æ–≤—ã–µ", callback_data="submissions_new")
                ],
                [
                    InlineKeyboardButton(
                        text="‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ", callback_data="submissions_solved"),
                    InlineKeyboardButton(
                        text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ", callback_data="submissions_viewed")
                ]
            ]
        )

        if isinstance(message, Message):
            await message.answer(response, reply_markup=keyboard)
        elif isinstance(message, CallbackQuery) and message.message and isinstance(message.message, Message) and hasattr(message.message, 'edit_text'):
            try:
                await message.message.edit_text(response, reply_markup=keyboard)
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
                if "message is not modified" not in str(e):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(response, reply_markup=keyboard)
        elif isinstance(message, CallbackQuery):
            await message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            if message.message and message.message.chat and message.bot:
                try:
                    await message.bot.send_message(
                        chat_id=message.message.chat.id,
                        text=response,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–∫–∏: {e}")
        if isinstance(message, CallbackQuery):
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_keyboard())


@router.message(F.text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∫—É')
async def view_submissions_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return
    await send_submissions_menu(message)


@router.callback_query(F.data.startswith("submissions_"))
async def handle_submissions_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        action = callback.data.split("_")[1]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "back" –∑–¥–µ—Å—å –∂–µ
        if action == "back":
            try:
                await send_submissions_menu(callback)
                await state.clear()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–∫–∏: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–∫–∏")
            return

        await submission_db.init()

        if action == "all":
            submissions = await submission_db.get_all_submissions()
            status_filter = "all"
        elif action in ["new", "solved", "viewed"]:
            submissions = await submission_db.get_submissions_by_status(action)
            status_filter = action
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        if not submissions:
            await callback.answer(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{action}'")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 10)
        await show_submissions_list(callback, submissions[:10], 0, status_filter)
        await state.set_state(SubmissionsViewState.viewing_list)
        await state.update_data(submissions=submissions, current_page=0, status_filter=status_filter)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –ø—Ä–µ–¥–ª–æ–∂–æ–∫: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def show_submissions_list(message: Union[Message, CallbackQuery, Any], submissions: list, page: int, status_filter: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    total_pages = (len(submissions) - 1) // 10 + 1
    start_idx = page * 10
    end_idx = min(start_idx + 10, len(submissions))

    response = f"üìã –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ({len(submissions)} —à—Ç.)\n"
    if status_filter != "all":
        status_names = {"new": "üÜï –ù–æ–≤—ã–µ",
                        "solved": "‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ", "viewed": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"}
        response += f"–§–∏–ª—å—Ç—Ä: {status_names.get(status_filter, status_filter)}\n"
    response += f"\n"
    response += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏
    for i, submission in enumerate(submissions[start_idx:end_idx], start_idx + 1):
        id_, user_id, username, text, file_ids, status, admin_response, processed_at, viewed_at, created_at = submission
        text_preview = text[:30] + "..." if len(text) > 30 else text
        status_emoji = {"new": "üÜï", "viewed": "üëÅÔ∏è", "solved": "‚úÖ"}
        status_display = status_emoji.get(status, "‚ùì")
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{status_display} {i}. @{username}: {text_preview}",
                callback_data=f"view_{id_}"
            )
        ])

    if total_pages > 1:
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
        nav_row.append(InlineKeyboardButton(
            text=f"{page+1}/{total_pages}", callback_data="page_info"))
        if page < total_pages - 1:
            nav_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{page+1}"))
        keyboard_buttons.append(nav_row)

    keyboard_buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="submissions_back")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if isinstance(message, Message):
        await message.answer(response, reply_markup=keyboard)
    elif isinstance(message, CallbackQuery) and message.message and isinstance(message.message, Message) and hasattr(message.message, 'edit_text'):
        try:
            await message.message.edit_text(response, reply_markup=keyboard)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
            if "message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(response, reply_markup=keyboard)
    elif isinstance(message, CallbackQuery):
        await message.answer(response, reply_markup=keyboard)


@router.callback_query(F.data.startswith("page_"))
async def handle_page_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        user_data = await state.get_data()
        submissions = user_data.get('submissions', [])
        status_filter = user_data.get('status_filter', 'all')

        if callback.data == "page_info":
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return

        page = int(callback.data.split("_")[1])
        await state.update_data(current_page=page)

        await show_submissions_list(callback, submissions, page, status_filter)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("view_"))
async def handle_view_submission(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        submission_id = int(callback.data.split("_")[1])

        await submission_db.init()
        submission = await submission_db.get_submission_by_id(submission_id)

        if not submission:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
        await submission_db.mark_as_viewed(submission_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await show_submission_detail(callback, submission, callback.bot)
        await state.set_state(SubmissionsViewState.viewing_detail)
        await state.update_data(current_submission_id=submission_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def send_media_group_with_text(bot: Bot, message: Union[Message, CallbackQuery, Any], files: list, text: str, id_: int, username: str, status_display: str, created_at: str, keyboard: InlineKeyboardMarkup):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–æ 10 (–ª–∏–º–∏—Ç Telegram)
        files = files[:10]
        media_group = []
        for i, file_id in enumerate(files):
            if i == 0:
                media_item = InputMediaPhoto(
                    media=file_id,
                    caption=text
                )
            else:
                media_item = InputMediaPhoto(media=file_id)
            media_group.append(media_item)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
        chat_id = None
        if hasattr(message, 'from_user') and message.from_user:
            chat_id = message.from_user.id
        elif isinstance(message, CallbackQuery) and message.message and hasattr(message.message, 'chat'):
            chat_id = message.message.chat.id
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        await bot.send_media_group(chat_id=chat_id, media=media_group)
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        info_text = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ #{id_} –æ—Ç @{username}\n"
        info_text += f"üìÖ –î–∞—Ç–∞: {created_at}\n"
        info_text += f"–°—Ç–∞—Ç—É—Å: {status_display}\n\n"
        info_text += f"üìù –¢–µ–∫—Å—Ç:\n{text}"
        await bot.send_message(
            chat_id=chat_id,
            text=info_text,
            reply_markup=keyboard
        )
        logger.info(
            f"‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(files)} —Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
        raise


async def show_submission_detail(message: Union[Message, CallbackQuery, Any], submission, bot: Optional[Bot] = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    id_, user_id, username, text, file_ids, status, admin_response, processed_at, viewed_at, created_at = submission
    status_names = {"new": "üÜï –ù–æ–≤–∞—è",
                    "viewed": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞", "solved": "‚úÖ –†–µ—à–µ–Ω–∞"}
    status_display = status_names.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –†–µ—à–µ–Ω–∞", callback_data=f"solve_{id_}"),
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{id_}")
            ],
            [
                InlineKeyboardButton(
                    text="üì§ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{id_}"),
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")
            ]
        ]
    )
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é
    if file_ids and bot:
        try:
            files = json.loads(file_ids)
            if files:
                await send_media_group_with_text(bot, message, files, text, id_, username, status_display, created_at, keyboard)
                return
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    response = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ #{id_} –æ—Ç @{username}\n"
    response += f"üìÖ –î–∞—Ç–∞: {created_at}\n"
    response += f"–°—Ç–∞—Ç—É—Å: {status_display}\n\n"
    response += f"üìù –¢–µ–∫—Å—Ç:\n{text}\n\n"
    if file_ids:
        files = json.loads(file_ids)
        response += f"üìÅ –§–∞–π–ª—ã ({len(files)}):\n"
        for i, file_id in enumerate(files, 1):
            response += f"{i}. {file_id}\n"
    if isinstance(message, Message):
        await message.answer(response, reply_markup=keyboard)
    elif isinstance(message, CallbackQuery) and message.message and isinstance(message.message, Message) and hasattr(message.message, 'edit_text'):
        try:
            await message.message.edit_text(response, reply_markup=keyboard)
        except Exception as e:
            if "message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(response, reply_markup=keyboard)
    elif isinstance(message, CallbackQuery):
        await message.answer(response, reply_markup=keyboard)


@router.callback_query(F.data.startswith("solve_"))
async def handle_solve_submission(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        submission_id = int(callback.data.split("_")[1])

        await submission_db.init()
        await submission_db.mark_as_solved(submission_id)

        await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        submission = await submission_db.get_submission_by_id(submission_id)
        if submission and callback.message:
            await show_submission_detail(callback.message, submission, callback.bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("delete_"))
async def handle_delete_submission(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        submission_id = int(callback.data.split("_")[1])

        logger.info(f"üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {submission_id}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
        response += f"–°–æ–æ–±—â–µ–Ω–∏–µ #{submission_id} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.\n\n"
        response += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{submission_id}"),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
                ]
            ]
        )

        if isinstance(callback.message, Message):
            await callback.message.edit_text(response, reply_markup=keyboard)
            await state.set_state(SubmissionsViewState.confirm_delete)
            await state.update_data(submission_to_delete=submission_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("confirm_delete_"))
async def handle_confirm_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        submission_id = int(callback.data.split("_")[2])  # confirm_delete_ID

        logger.info(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {submission_id}")
        await submission_db.init()
        await submission_db.delete_submission(submission_id)
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {submission_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")

        await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
        if isinstance(callback.message, Message):
            try:
                await callback.message.delete()
                logger.info("üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await state.set_state(SubmissionsViewState.viewing_list)
        user_data = await state.get_data()
        submissions = user_data.get('submissions', [])
        current_page = user_data.get('current_page', 0)
        status_filter = user_data.get('status_filter', 'all')

        # –£–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        submissions = [s for s in submissions if s[0] != submission_id]
        await state.update_data(submissions=submissions)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if callback.from_user:
            try:
                if callback.message:
                    await show_submissions_list(
                        callback.message,
                        submissions,
                        current_page,
                        status_filter
                    )
                    await state.set_state(SubmissionsViewState.viewing_list)
                else:
                    await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "cancel_delete")
async def handle_cancel_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        user_data = await state.get_data()
        submission_id = user_data.get('current_submission_id')

        if submission_id and callback.message:
            await submission_db.init()
            submission = await submission_db.get_submission_by_id(submission_id)
            if submission:
                await show_submission_detail(callback.message, submission, callback.bot)
                await state.set_state(SubmissionsViewState.viewing_detail)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("reply_"))
async def handle_reply_submission(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        submission_id = int(callback.data.split("_")[1])

        await state.set_state(SubmissionsViewState.waiting_response)
        await state.update_data(submission_to_reply=submission_id)

        response = f"üì§ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ #{submission_id}\n\n"
        response += f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reply")]]
        )

        if isinstance(callback.message, Message):
            await callback.message.edit_text(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "cancel_reply")
async def handle_cancel_reply(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        user_data = await state.get_data()
        submission_id = user_data.get('current_submission_id')

        if submission_id and callback.message:
            await submission_db.init()
            submission = await submission_db.get_submission_by_id(submission_id)
            if submission:
                await show_submission_detail(callback.message, submission, callback.bot)
                await state.set_state(SubmissionsViewState.viewing_detail)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(SubmissionsViewState.waiting_response)
async def handle_response_text(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    try:
        user_data = await state.get_data()
        submission_id = user_data.get('submission_to_reply')

        if not submission_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        await submission_db.init()
        submission = await submission_db.get_submission_by_id(submission_id)

        if not submission:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = submission[1]  # user_id –∏–∑ –∑–∞–ø–∏—Å–∏
        response_text = f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{submission_id}:\n\n{message.text}"

        try:
            await bot.send_message(user_id, response_text)
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await show_submission_detail(message, submission, bot)
        await state.set_state(SubmissionsViewState.viewing_detail)
        await state.update_data(current_submission_id=submission_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@router.callback_query(F.data == "back_to_list")
async def handle_back_to_list(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        user_data = await state.get_data()
        submissions = user_data.get('submissions', [])
        current_page = user_data.get('current_page', 0)
        status_filter = user_data.get('status_filter', 'all')

        if callback.message:
            await show_submissions_list(callback.message, submissions, current_page, status_filter)
            await state.set_state(SubmissionsViewState.viewing_list)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# -------------------------------
# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------------


@router.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BroadcastState.waiting_message)


@router.message(BroadcastState.waiting_message)
async def process_broadcast(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    await state.clear()

    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    users = await db.get_all_users()
    success = 0
    failed = 0
    sender_id = message.from_user.id  # ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=get_admin_keyboard())

    for user in users:
        user_id = user[0]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        if user_id == sender_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            continue

        try:
            await bot.send_message(user_id, message.text or "")
            success += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ç–∏–≤ —Ñ–ª—É–¥–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(list(users))-1}\n"  # -1 –∑–∞ —Å—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å): 1",
        reply_markup=get_admin_keyboard()
    )


@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_admin_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥: –µ—Å–ª–∏ –≤ –¥–µ—Ç–∞–ª—è—Ö ‚Äî –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–Ω–∞—á–µ ‚Äî –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return
    current_state = await state.get_state()
    if current_state == SubmissionsViewState.viewing_detail.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        user_data = await state.get_data()
        submissions = user_data.get('submissions', [])
        current_page = user_data.get('current_page', 0)
        status_filter = user_data.get('status_filter', 'all')
        await show_submissions_list(message, submissions, current_page, status_filter)
        await state.set_state(SubmissionsViewState.viewing_list)
    else:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())


# -------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
# -------------------------------


@router.message(F.text == 'üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
async def bans_menu_handler(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    await message.answer("üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏:", reply_markup=get_bans_keyboard())


@router.message(F.text == 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö')
async def banned_list_handler(message: Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    try:
        banned_db = get_banned_db()
        banned_users = await banned_db.get_banned_list()

        if not banned_users:
            await message.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        response = f"üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(banned_users)}):\n\n"

        for i, user in enumerate(banned_users[:10], 1):
            user_id = user['user_id']
            username = user['username'] or "unknown"
            reason = user['reason'][:50] + \
                "..." if len(user['reason']) > 50 else user['reason']
            ban_count = user['ban_count']
            banned_at = user['banned_at'][:16]

            if user['is_permanent']:
                status = "üî¥ –ù–ê–í–°–ï–ì–î–ê"
            elif user['expires_at']:
                status = f"üü° –î–æ {user['expires_at'][:16]}"
            else:
                status = "üü† –í—Ä–µ–º–µ–Ω–Ω–∞—è"

            response += f"{i}. @{username} (ID: {user_id})\n"
            response += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            response += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            response += f"   –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {ban_count}\n"
            response += f"   –î–∞—Ç–∞: {banned_at}\n\n"

        if len(banned_users) > 10:
            response += f"... –∏ –µ—â—ë {len(banned_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫')
async def bans_stats_handler(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    try:
        banned_db = get_banned_db()
        stats = await banned_db.get_ban_stats()

        response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:\n\n"
        response += f"üî¥ –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['total']}\n"
        response += f"üü° –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {stats['temporary']}\n"
        response += f"üî¥ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {stats['permanent']}\n"
        response += f"üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['today']}\n"

        await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == 'üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def find_user_handler(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- 123456789\n"
        "- @username\n"
        "- username (–±–µ–∑ @)"
    )
    await state.set_state("waiting_user_search")


@router.message(F.text == 'üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ')
async def cleanup_expired_handler(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    try:
        banned_db = get_banned_db()
        cleaned_count = await banned_db.cleanup_expired_bans()

        await message.answer(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned_count} –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def back_to_admin_from_bans(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    await state.clear()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class BanStates(StatesGroup):
    waiting_user_search = State()
    waiting_ban_reason = State()


@router.message(BanStates.waiting_user_search)
async def process_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    search_query = message.text.strip() if message.text else ""

    try:
        # –ü–∞—Ä—Å–∏–º ID –∏–ª–∏ username
        user_id = None
        username = None

        if search_query.isdigit():
            user_id = int(search_query)
        elif search_query.startswith('@'):
            username = search_query[1:]
        else:
            username = search_query

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id:
            is_banned = await is_user_banned(user_id)
            ban_info = await get_ban_info(user_id) if is_banned else None
        else:
            # –î–ª—è username –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ ID (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            await message.answer("‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ username –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            return

        if is_banned and ban_info:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            keyboard = get_unban_user_keyboard(
                user_id, ban_info.get('username'))
            await message.answer(
                f"üîç –ù–∞–π–¥–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n"
                f"ID: {user_id}\n"
                f"Username: @{ban_info.get('username', 'unknown')}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {ban_info.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {ban_info.get('ban_count', 1)}\n"
                f"–î–∞—Ç–∞: {ban_info.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}\n\n"
                f"–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å?",
                reply_markup=keyboard
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            keyboard = get_ban_user_keyboard(user_id, "unknown")
            await message.answer(
                f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n"
                f"ID: {user_id}\n"
                f"Username: @unknown\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –•–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å?",
                reply_markup=keyboard
            )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        await state.clear()


@router.callback_query(F.data.startswith("ban_user:"))
async def ban_user_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1]) if callback.data else 0

    if callback.message:
        await callback.message.edit_text(  # type: ignore
            f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
        )

    await state.update_data(ban_user_id=user_id)
    await state.set_state(BanStates.waiting_ban_reason)


@router.callback_query(F.data.startswith("unban_user:"))
async def unban_user_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user or callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1]) if callback.data else 0

    try:
        success = await unban_user(user_id)

        if success and callback.message:
            await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        elif callback.message:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        if callback.message:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "cancel_ban")
async def cancel_ban_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "cancel_unban")
async def cancel_unban_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("‚ùå –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.message(BanStates.waiting_ban_reason)
async def process_ban_reason(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    user_data = await state.get_data()
    ban_user_id = user_data.get('ban_user_id')
    reason = message.text.strip() if message.text else ""

    if not ban_user_id or not reason:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        await state.clear()
        return

    try:
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ban_result = await ban_user(ban_user_id, "unknown", reason, message.from_user.id)

        ban_count = ban_result.get('ban_count', 1)
        duration = "24 —á–∞—Å–∞" if ban_count == 1 else "7 –¥–Ω–µ–π" if ban_count == 2 else "–Ω–∞–≤—Å–µ–≥–¥–∞"

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ban_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
            f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ‚Ññ{ban_count}"
        )

    except ValueError as e:
        if "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in str(e):
            await message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")

    await state.clear()
