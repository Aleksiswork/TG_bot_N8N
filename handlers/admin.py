from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from keyboards import get_admin_keyboard
from config import FILES_DIR, BOT_VERSION, ADMIN_ID
from datetime import datetime
import time
import re
import os
import csv
import logging
import asyncio  # –î–æ–±–∞–≤–∏—Ç—å –≤ –±–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
from datetime import datetime
from aiogram.types import ReplyKeyboardRemove

router = Router()
db = Database()
logger = logging.getLogger(__name__)


class BroadcastState(StatesGroup):
    waiting_message = State()

# -------------------------------
# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------


@router.message(F.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
async def admin_panel(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())


@router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_handler(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    if message.from_user.id != ADMIN_ID:
        return

    total_users, recent_users = await db.get_users_stats()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (v{BOT_VERSION}):\n"
    stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
    stats_text += "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:\n"

    for user in recent_users:
        stats_text += f"- {user[0]} (@{user[1]}) - {user[2][:10]}\n"

    await message.answer(stats_text)


@router.message(F.text == 'üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞')
async def version_handler(message: Message):
    """–ü–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞"""
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer(f"üîß –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {BOT_VERSION}")


# @router.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
# async def export_db_csv_handler(message: Message):
#     """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     temp_file = None
#     try:
#         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#         filename = f"bot_users_export_{timestamp}.csv"
#         temp_file = os.path.join(FILES_DIR, filename)

#         users = await db.get_all_users()

#         if not users:
#             await message.answer("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
#             return

#         with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
#             writer = csv.writer(f, delimiter=';', quoting=csv.QUOTE_ALL)
#             writer.writerow(['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è',
#                             '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])
#             for user in users:
#                 writer.writerow([
#                     user[0],
#                     f'"{user[1]}"' if user[1] else '',
#                     f'"{user[2]}"' if user[2] else '',
#                     f'"{user[3]}"' if user[3] else '',
#                     user[4],
#                     user[5]
#                 ])

#         document = FSInputFile(temp_file, filename=filename)
#         await message.answer_document(
#             document,
#             caption=(
#                 f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ë–î ({len(users)} –∑–∞–ø–∏—Å–µ–π)\n"
#                 f"‚ÑπÔ∏è –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel:\n"
#                 f"1. '–î–∞–Ω–Ω—ã–µ' ‚Üí '–ò–∑ —Ç–µ–∫—Å—Ç–∞/CSV'\n"
#                 f"2. –ö–æ–¥–∏—Ä–æ–≤–∫–∞: 65001 UTF-8\n"
#                 f"3. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π"
#             )
#         )
#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
#     finally:
#         if temp_file and os.path.exists(temp_file):
#             os.remove(temp_file)

# @router.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
# async def export_db_csv_handler(message: Message):
#     if message.from_user.id != ADMIN_ID:
#         return

#     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
#     for filename in os.listdir(FILES_DIR):
#         if filename.startswith("bot_users_export_") and filename.endswith(".csv"):
#             filepath = os.path.join(FILES_DIR, filename)
#             if os.path.getmtime(filepath) < time.time() - 3600:
#                 os.remove(filepath)

#     temp_file = None
#     try:
#         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#         filename = f"bot_users_export_{timestamp}.csv"
#         temp_file = os.path.join(FILES_DIR, filename)

#         users = await db.get_all_users()

#         if len(users) > 10_000:
#             await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
#             return

#         with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
#             writer = csv.writer(f, delimiter=';', quoting=csv.QUOTE_ALL)
#             # ... –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö ...

#         document = FSInputFile(temp_file, filename=filename)
#         await message.answer_document(document)

#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
#     finally:
#         if temp_file and os.path.exists(temp_file):
#             os.remove(temp_file)
#             logger.info(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")

# @router.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
# async def export_db_csv_handler(message: Message):
#     """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (>1 —á–∞—Å–∞)
#     for filename in os.listdir(FILES_DIR):
#         if filename.startswith("bot_users_export_") and filename.endswith(".csv"):
#             filepath = os.path.join(FILES_DIR, filename)
#             file_age = time.time() - os.path.getmtime(filepath)
#             if file_age > 3600:  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
#                 try:
#                     os.remove(filepath)
#                     logger.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")
#                 except Exception as e:
#                     logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {filename}: {e}")

#     temp_file = None
#     try:
#         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#         filename = f"bot_users_export_{timestamp}.csv"
#         temp_file = os.path.join(FILES_DIR, filename)

#         users = await db.get_all_users()

#         if len(users) > 10000:
#             await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 10 000 –∑–∞–ø–∏—Å–µ–π)")
#             return

#         with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
#             writer = csv.writer(f, delimiter=';', quoting=csv.QUOTE_ALL)
#             writer.writerow(['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è',
#                             '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])
#             for user in users:
#                 writer.writerow([
#                     user[0],
#                     f'"{user[1]}"' if user[1] else '',
#                     f'"{user[2]}"' if user[2] else '',
#                     f'"{user[3]}"' if user[3] else '',
#                     user[4],
#                     user[5]
#                 ])

#         document = FSInputFile(temp_file, filename=filename)
#         await message.answer_document(
#             document,
#             caption=(
#                 f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ë–î ({len(users)} –∑–∞–ø–∏—Å–µ–π)\n"
#                 f"‚ÑπÔ∏è –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"
#             )
#         )
#         logger.info(f"–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}")

#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
#     finally:
#         if temp_file and os.path.exists(temp_file):
#             try:
#                 os.remove(temp_file)
#                 logger.info(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

@router.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
async def export_db_csv_handler(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if message.from_user.id != ADMIN_ID:
        return

    try:
        all_users = await db.get_all_users()
        total_users = len(all_users)

        if not all_users:
            await message.answer("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        MAX_FILE_SIZE_MB = 45  # –õ–∏–º–∏—Ç Telegram
        BATCH_SIZE = 10000     # –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        batches = [all_users[i:i + BATCH_SIZE]
                   for i in range(0, total_users, BATCH_SIZE)]
        sent_files = 0

        for i, batch in enumerate(batches, 1):
            temp_file = os.path.join(
                FILES_DIR, f"users_part{i}_{timestamp}.csv")

            try:
                # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ CSV
                with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
                    writer = csv.writer(
                        f, delimiter=';', quoting=csv.QUOTE_ALL)
                    writer.writerow(
                        ['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])
                    for user in batch:
                        writer.writerow([
                            user[0],
                            f'"{user[1]}"' if user[1] else '',
                            f'"{user[2]}"' if user[2] else '',
                            f'"{user[3]}"' if user[3] else '',
                            user[4],
                            user[5]
                        ])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                file_size_mb = os.path.getsize(temp_file) / (1024 * 1024)
                if file_size_mb > MAX_FILE_SIZE_MB:
                    logger.warning(
                        f"–§–∞–π–ª part{i} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç: {file_size_mb:.2f}MB")
                    await message.answer(f"‚ö†Ô∏è –§–∞–π–ª part{i} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f}MB)")
                    continue

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                await message.answer_document(
                    FSInputFile(temp_file),
                    caption=f"Part {i}/{len(batches)} ({len(batch)} users)"
                )
                sent_files += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ part{i}: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ part{i}: {str(e)}")

            finally:
                if os.path.exists(temp_file):
                    os.remove(temp_file)

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await message.answer(
            f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_files}/{len(batches)} —Ñ–∞–π–ª–æ–≤\n"
            f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_SIZE_MB}MB"
        )

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await message.answer(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# -------------------------------
# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------------


@router.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BroadcastState.waiting_message)


# @router.message(BroadcastState.waiting_message)
# async def process_broadcast(message: Message, state: FSMContext, bot: Bot):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
#     await state.clear()

#     if message.from_user.id != ADMIN_ID:
#         return

#     users = await db.get_all_users()
#     success = 0
#     failed = 0

#     await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=get_admin_keyboard())

#     for user in users:
#         try:
#             await bot.send_message(user[0], message.text)
#             success += 1
#             await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
#             failed += 1

#     await message.answer(
#         f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
#         f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
#         f"‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
#         reply_markup=get_admin_keyboard()
#     )

@router.message(BroadcastState.waiting_message)
async def process_broadcast(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    await state.clear()

    if message.from_user.id != ADMIN_ID:
        return

    users = await db.get_all_users()
    success = 0
    failed = 0
    sender_id = message.from_user.id  # ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=get_admin_keyboard())

    for user in users:
        user_id = user[0]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        if user_id == sender_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            continue

        try:
            await bot.send_message(user_id, message.text)
            success += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ç–∏–≤ —Ñ–ª—É–¥–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)-1}\n"  # -1 –∑–∞ —Å—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å): 1",
        reply_markup=get_admin_keyboard()
    )


@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_admin_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
