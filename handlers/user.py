from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from database import Database
from keyboards import (
    get_subscribe_keyboard,
    get_main_keyboard
)
from utils import check_subscription
from config import FILES_DIR, ADMIN_IDS
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
import os
import logging


class IdeaStates(StatesGroup):
    waiting_for_idea = State()


class BroadcastState(StatesGroup):
    waiting_message = State()


router = Router()
db = Database()
logger = logging.getLogger(__name__)

# -------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
# -------------------------------


@router.message(F.text == "üì® –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")
async def start_idea_suggestion(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–∏"""
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(IdeaStates.waiting_for_idea)


@router.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMIN_IDS:
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BroadcastState.waiting_message)


@router.message(IdeaStates.waiting_for_idea)
async def process_idea(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
    try:
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥–∏
        logger.info(f"–ò–¥–µ—è –æ—Ç @{message.from_user.username}: {message.text}")

        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await bot.send_message(
            ADMIN_IDS,
            f"–ù–æ–≤–∞—è –∏–¥–µ—è –æ—Ç @{message.from_user.username}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–¥–µ–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    finally:
        await state.clear()


@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î')
async def send_db_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    await db.save_user(message.from_user)

    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'temp.txt')
    try:
        document = FSInputFile(file_path, filename="guide_bd.txt")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞ –ë–î: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == '–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen')
async def send_firewall_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ —Ñ–∞–µ—Ä–≤–æ–ª—É"""
    await db.save_user(message.from_user)

    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'bonus.pdf')
    try:
        document = FSInputFile(file_path, filename="bonus.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —Ñ–∞–µ—Ä–≤–æ–ª—É –∏ ssh-keygen")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N')
async def send_n8n_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ N8N"""
    await db.save_user(message.from_user)

    file_path = os.path.join(FILES_DIR, 'install.pdf')
    try:
        document = FSInputFile(file_path, filename="install.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ N8N")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# -------------------------------
# –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# -------------------------------


@router.message(F.text == '–§–∏—à–∫–∏')
async def send_tips(message: Message, bot: Bot):
    """–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏"""
    await db.save_user(message.from_user)

    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏...")


@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_main(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )
