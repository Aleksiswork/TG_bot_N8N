import asyncio
import time
from typing import Optional
from aiogram import Router, F, Bot, types
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from database import Database
from keyboards import (
    get_subscribe_keyboard,
    get_main_keyboard
)
from utils import check_subscription
from utils.checks import is_user_banned, ban_user, get_user_info, get_ban_info
from config import FILES_DIR, ADMIN_IDS
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
import os
import logging
from database.submissions import SubmissionDB


class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_reply = State()


class BroadcastState(StatesGroup):
    waiting_message = State()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
submission_db = SubmissionDB()
router = Router()
logger = logging.getLogger(__name__)
try:
    db = Database()
except Exception as e:
    db = None
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Database: {e}")

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
user_activity = {}  # {user_id: {'messages': [], 'last_message': timestamp}}


async def check_user_activity(user_id: int, message_text: Optional[str] = None) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª

    Returns:
        tuple[bool, str]: (–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
    """
    current_time = time.time()

    if user_id not in user_activity:
        user_activity[user_id] = {
            'messages': [],
            'last_message': current_time,
            'duplicate_count': 0,
            'last_text': None
        }

    user_data = user_activity[user_id]

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
    user_data['messages'] = [msg for msg in user_data['messages']
                             if current_time - msg < 60]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_data['messages'].append(current_time)
    user_data['last_message'] = current_time

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–∏–Ω—É—Ç—É
    if len(user_data['messages']) > 5:
        reason = "–°–ø–∞–º: –±–æ–ª–µ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–∏–Ω—É—Ç—É"
        await auto_ban_user(user_id, reason)
        return False, reason

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    if message_text:
        if user_data['last_text'] == message_text:
            user_data['duplicate_count'] += 1
            if user_data['duplicate_count'] >= 3:
                reason = "–°–ø–∞–º: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
                await auto_ban_user(user_id, reason)
                return False, reason
        else:
            user_data['duplicate_count'] = 0
            user_data['last_text'] = message_text

    return True, ""


async def auto_ban_user(user_id: int, reason: str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é
        username = "unknown"
        try:
            if db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—â–µ–º –Ω—É–∂–Ω–æ–≥–æ
                users = await db.get_all_users()
                for user in users:
                    if user[0] == user_id:  # user[0] is user_id
                        username = user[1] or "unknown"  # user[1] is username
                        break
                else:
                    username = "unknown"
        except:
            username = "unknown"

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # 0 = —Å–∏—Å—Ç–µ–º–∞
        ban_result = await ban_user(user_id, username, reason, 0)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        if bot:
            for admin_id in ADMIN_IDS:
                try:
                    ban_count = ban_result.get('ban_count', 1)
                    duration = "24 —á–∞—Å–∞" if ban_count == 1 else "7 –¥–Ω–µ–π" if ban_count == 2 else "–Ω–∞–≤—Å–µ–≥–¥–∞"

                    await bot.send_message(
                        admin_id,
                        f"üö´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                        f"ID: {user_id}\n"
                        f"Username: @{username}\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                        f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {duration}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    except ValueError as e:
        if "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in str(e):
            logger.info(
                f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ main.py)
bot = None


def set_bot_instance(bot_instance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot
    bot = bot_instance

# -------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
# -------------------------------


@router.message(F.text == "üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def start_feedback(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if not message.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    is_banned = await is_user_banned(message.from_user.id)
    ban_info = await get_ban_info(message.from_user.id) if is_banned else None
    ban_text = ""
    if is_banned and ban_info:
        if ban_info['is_permanent']:
            ban_text = "\n\nüö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ 1 –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–µ–¥–µ–ª—é, –ø–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–Ω—è—Ç–∞."
        else:
            ban_text = f"\n\nüö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {ban_info['expires_at'][:16]} –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ 1 –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–µ–¥–µ–ª—é, –ø–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–Ω—è—Ç–∞."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ò—Å—Ç–æ—Ä–∏—è" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    rules_text = f"""
üì® **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç + –¥–æ 5 —Ñ–æ—Ç–æ/—Ñ–∞–π–ª–æ–≤). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.

–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –ø–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é, –æ—Ç–∫—Ä–æ–π—Ç–µ 'üìú –ò—Å—Ç–æ—Ä–∏—è', –≤—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å'.

‚ö†Ô∏è **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ù–µ —Å–ø–∞–º–∏—Ç—å (–Ω–µ –±–æ–ª–µ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ –∑–∞ –º–∏–Ω—É—Ç—É)
‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ù–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ (5 —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
‚Ä¢ –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

üö´ **–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:**
‚Ä¢ 1-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: 24 —á–∞—Å–∞
‚Ä¢ 2-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: 7 –¥–Ω–µ–π  
‚Ä¢ 3-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –Ω–∞–≤—Å–µ–≥–¥–∞
{ban_text}
"""

    await message.answer(rules_text, reply_markup=keyboard)
    await state.set_state(FeedbackStates.waiting_for_feedback)
    await state.update_data(accumulated_files=[], accumulated_text="")


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è' (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ!)
@router.message(FeedbackStates.waiting_for_feedback, F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_user_history(message: types.Message, state: FSMContext, bot: Bot):
    await submission_db.init()
    if not submission_db.connection:
        if message:
            await message.answer("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    async with submission_db.connection.cursor() as cursor:
        await cursor.execute('SELECT id, text_content, file_ids, status, created_at FROM submissions WHERE user_id = ? ORDER BY created_at DESC', (user_id,))
        rows = await cursor.fetchall()
    rows = list(rows) if rows else []
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    for row in rows[:10]:
        sub_id, text, file_ids, status, created_at = row
        preview = (
            text[:30] + "...") if text and len(text) > 30 else (text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
        btn_text = f"{created_at[:16]}: {preview}"
        buttons.append([InlineKeyboardButton(
            text=btn_text, callback_data=f"mymsg_{sub_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=keyboard)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@router.message(FeedbackStates.waiting_for_feedback, F.photo | F.document | F.text)
async def handle_feedback_content(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        if not message.from_user:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
            await state.clear()
            return

        user_id = message.from_user.id
        is_banned = await is_user_banned(user_id)
        ban_info = await get_ban_info(user_id) if is_banned else None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = message.text or message.caption or ""
        can_continue, ban_reason = await check_user_activity(user_id, message_text)

        if not can_continue:
            await message.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞: {ban_reason}", reply_markup=get_main_keyboard(user_id))
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer(
                "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_keyboard(user_id)
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        if message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            user_data = await state.get_data()
            accumulated_text = user_data.get('accumulated_text', '') or ''
            accumulated_text = accumulated_text.strip()
            accumulated_files = user_data.get('accumulated_files', [])

            if not accumulated_text and not accumulated_files:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç")
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
                        ],
                        resize_keyboard=True
                    )
                )
                return

            # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö ---
            if is_banned and ban_info:
                await submission_db.init()
                last_time_str = await submission_db.get_last_submission_time(user_id)
                import datetime
                now = datetime.datetime.now()
                if last_time_str:
                    try:
                        last_time = datetime.datetime.fromisoformat(
                            last_time_str)
                    except Exception:
                        last_time = None
                    if last_time:
                        delta = now - last_time
                        if delta.total_seconds() < 7*24*3600:
                            # –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                            left = 7*24*3600 - delta.total_seconds()
                            days = int(left // (24*3600))
                            hours = int((left % (24*3600)) // 3600)
                            minutes = int((left % 3600) // 60)
                            left_str = f"{days}–¥ {hours}—á {minutes}–º"
                            if ban_info['is_permanent']:
                                ban_text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞. –°–ª–µ–¥—É—é—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {left_str}"
                            else:
                                ban_text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {ban_info['expires_at'][:16]}. –°–ª–µ–¥—É—é—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {left_str}"
                            await message.answer(ban_text, reply_markup=get_main_keyboard(user_id))
                            return
            # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                await submission_db.init()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard(user_id))
                return

            try:
                await submission_db.add_submission(
                    user_id=user_id,
                    username=message.from_user.username or "unknown",
                    text=accumulated_text,
                    file_ids=accumulated_files[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ñ–∞–π–ª–∞–º–∏
                )

                await message.answer(
                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
                    reply_markup=get_main_keyboard(user_id)
                )
                await state.clear()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard(user_id)
                )
                await state.clear()
            return

        user_id = message.from_user.id if message.from_user else "unknown"
        username = message.from_user.username if message.from_user else "unknown"

        user_data = await state.get_data()
        accumulated_files = user_data.get('accumulated_files', [])
        accumulated_text = user_data.get('accumulated_text', '') or ''

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        if message.photo:
            file_id = message.photo[-1].file_id
            accumulated_files.append(file_id)
        elif message.document:
            file_id = message.document.file_id
            accumulated_files.append(file_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è caption –∫ –º–µ–¥–∏–∞)
        text_to_add = None
        if message.text:
            text_to_add = message.text
        elif message.caption:
            text_to_add = message.caption

        if text_to_add:
            if accumulated_text:
                new_text = accumulated_text + "\n\n" + text_to_add
            else:
                new_text = text_to_add
            accumulated_text = new_text

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(accumulated_files=accumulated_files, accumulated_text=accumulated_text)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        status_message = f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        if accumulated_text:
            status_message += f"üìù –¢–µ–∫—Å—Ç: {len(accumulated_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
        if accumulated_files:
            status_message += f"üìÅ –§–∞–π–ª–æ–≤: {len(accumulated_files)}/5\n"

        status_message += f"\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."

        await message.answer(status_message, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_feedback_content: {e}")
        logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        try:
            user_id = message.from_user.id if message.from_user else 0
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard(user_id)
            )
            await state.clear()
        except Exception as cleanup_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {cleanup_error}")


@router.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏ '–û—Ç–º–µ–Ω–∏—Ç—å'
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':",
        reply_markup=keyboard
    )
    await state.set_state(BroadcastState.waiting_message)
    await state.update_data(accumulated_text="")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–æ–∫ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'/'–û—Ç–º–µ–Ω–∏—Ç—å' –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
@router.message(BroadcastState.waiting_message, F.photo | F.document | F.text)
async def handle_broadcast_content(message: types.Message, state: FSMContext, bot: Bot):
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return
    user_id = message.from_user.id
    user_data = await state.get_data()
    accumulated_text = user_data.get('accumulated_text', '') or ''
    accumulated_files = user_data.get(
        'accumulated_files', []) if user_data.get('accumulated_files') else []

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard(user_id)
        )
        await state.clear()
        return

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        accumulated_text = accumulated_text.strip()
        if not accumulated_text and not accumulated_files:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
                    ],
                    resize_keyboard=True
                )
            )
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if db is not None:
            users = await db.get_all_users()
            success = 0
            failed = 0
            for user in users:
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    for file_id in accumulated_files[:5]:
                        await bot.send_photo(user[0], file_id)
                    # –ó–∞—Ç–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if accumulated_text:
                        await bot.send_message(user[0], accumulated_text)
                    success += 1
                except Exception:
                    failed += 1
            await message.answer(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
                reply_markup=get_main_keyboard(user_id)
            )
            await state.clear()
            return
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_keyboard(user_id))
            return

    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    if message.photo:
        file_id = message.photo[-1].file_id
        accumulated_files.append(file_id)
    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    elif message.document:
        file_id = message.document.file_id
        accumulated_files.append(file_id)
    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    text_to_add = None
    if message.text and message.text not in ["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]:
        text_to_add = message.text
    elif message.caption:
        text_to_add = message.caption
    if text_to_add:
        if accumulated_text:
            new_text = accumulated_text + "\n" + text_to_add
        else:
            new_text = text_to_add
        accumulated_text = new_text
    await state.update_data(accumulated_text=accumulated_text, accumulated_files=accumulated_files)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status_message = f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
    if accumulated_text:
        status_message += f"üìù –¢–µ–∫—Å—Ç: {len(accumulated_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
    if accumulated_files:
        status_message += f"üìÅ –§–∞–π–ª–æ–≤: {len(accumulated_files)}/5\n"
    status_message += f"\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
    await message.answer(
        status_message,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )


@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î')
async def send_db_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard(0))
        return

    await db.save_user(message.from_user)

    if not await check_subscription(message.from_user.id, bot):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'temp.txt')
    try:
        document = FSInputFile(file_path, filename="guide_bd.txt")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞ –ë–î: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))


@router.message(F.text == '–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen')
async def send_firewall_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ —Ñ–∞–µ—Ä–≤–æ–ª—É"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard(0))
        return

    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    await db.save_user(message.from_user)

    if not await check_subscription(message.from_user.id, bot):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'bonus.pdf')
    try:
        document = FSInputFile(file_path, filename="bonus.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —Ñ–∞–µ—Ä–≤–æ–ª—É –∏ ssh-keygen", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))


@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N')
async def send_n8n_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ N8N"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard(0))
        return

    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    await db.save_user(message.from_user)

    file_path = os.path.join(FILES_DIR, 'install.pdf')
    try:
        document = FSInputFile(file_path, filename="install.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ N8N", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))

# -------------------------------
# –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# -------------------------------


@router.message(F.text == '–§–∏—à–∫–∏')
async def send_tips(message: Message, bot: Bot):
    """–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard(0))
        return

    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    await db.save_user(message.from_user)

    if not await check_subscription(message.from_user.id, bot):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏...", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))


@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_main(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard(0))
        return

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


# === –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìú –ò—Å—Ç–æ—Ä–∏—è" –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ===
@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_user_history_anytime(message: types.Message, bot: Bot):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É) –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    await submission_db.init()
    if not submission_db.connection:
        if message:
            await message.answer("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    async with submission_db.connection.cursor() as cursor:
        await cursor.execute('SELECT id, text_content, file_ids, status, created_at FROM submissions WHERE user_id = ? ORDER BY created_at DESC', (user_id,))
        rows = await cursor.fetchall()
    rows = list(rows) if rows else []
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    for row in rows[:10]:
        sub_id, text, file_ids, status, created_at = row
        preview = (
            text[:30] + "...") if text and len(text) > 30 else (text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        response_indicator = " üí¨" if status == "answered" else ""
        btn_text = f"{created_at[:16]}: {preview}{response_indicator}"
        buttons.append([InlineKeyboardButton(
            text=btn_text, callback_data=f"mymsg_{sub_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("mymsg_"))
async def show_user_submission_detail(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await submission_db.init()
    if not submission_db.connection:
        if callback.message:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))
        await callback.answer()
        return
    if not callback.data:
        await callback.answer()
        return
    sub_id = int(callback.data.split("_")[1])
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    history = await submission_db.get_conversation_history(sub_id)

    if not history:
        if callback.message:
            await callback.message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))
        await callback.answer()
        return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
    header_text = f"üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ #{sub_id}\n\n"
    await bot.send_message(callback.from_user.id, header_text, reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –µ–≥–æ —Ñ–∞–π–ª–∞–º–∏
    for i, (sender_role, text, file_ids, created_at) in enumerate(history, 1):
        sender_label = "üë§ (–í—ã)" if sender_role == "user" else "üë®‚Äçüíº (–ê–¥–º–∏–Ω)"
        message_text = f"{sender_label} - {created_at[:16]}\n{text or '(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)'}"

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        if file_ids and file_ids != '[]':
            try:
                import json
                files = json.loads(file_ids)
                if files:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å —Ç–µ–∫—Å—Ç–æ–º
                    media_group = []
                    for j, file_id in enumerate(files[:5]):
                        if j == 0:  # –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º
                            media_group.append(InputMediaPhoto(
                                media=file_id,
                                caption=message_text
                            ))
                        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                            media_group.append(InputMediaPhoto(media=file_id))

                    await bot.send_media_group(callback.from_user.id, media_group)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(callback.from_user.id, message_text, reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await bot.send_message(callback.from_user.id, message_text, reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(callback.from_user.id, message_text, reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    actions_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_user_{sub_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="myhistory_back")]
    ])

    await bot.send_message(
        callback.from_user.id,
        "üéØ –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=actions_keyboard
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("reply_user_"))
async def handle_user_reply(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    if not callback.data:
        await callback.answer()
        return

    sub_id = int(callback.data.split("_")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(FeedbackStates.waiting_for_reply)
    await state.update_data(submission_id=sub_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    response = f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{sub_id}\n\n"
    response += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç + –¥–æ 5 —Ñ–æ—Ç–æ/—Ñ–∞–π–ª–æ–≤). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'."

    if callback.message:
        await callback.message.answer(response, reply_markup=keyboard)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
@router.message(FeedbackStates.waiting_for_reply, F.photo | F.document | F.text)
async def handle_user_reply_content(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    try:
        if not message.from_user:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard(message.from_user.id if message.from_user else 0))
            await state.clear()
            return

        user_id = message.from_user.id
        user_data = await state.get_data()
        submission_id = user_data.get('submission_id')

        if not submission_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_main_keyboard(user_id))
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer(
                "‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=get_main_keyboard(user_id)
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        if message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            accumulated_text = user_data.get('accumulated_text', '') or ''
            accumulated_text = accumulated_text.strip()
            accumulated_files = user_data.get('accumulated_files', [])

            if not accumulated_text and not accumulated_files:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
                        ],
                        resize_keyboard=True
                    )
                )
                return

            try:
                await submission_db.init()

                # –ü–æ–ª—É—á–∞–µ–º conversation_id –∏–∑ submissions
                submission = await submission_db.get_submission_by_id(submission_id)
                if not submission:
                    await message.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_main_keyboard(user_id))
                    await state.clear()
                    return

                # conversation_id –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                conversation_id = submission[6]

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–ø–∏—Å–∫—É
                await submission_db.add_message(
                    conversation_id=conversation_id,
                    sender_id=user_id,
                    receiver_id=0,  # 0 –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    sender_role='user',
                    text=accumulated_text,
                    file_ids=accumulated_files[:5]
                )

                await message.answer(
                    "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                    reply_markup=get_main_keyboard(user_id)
                )
                await state.clear()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î: {e}")
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard(user_id)
                )
                await state.clear()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_feedback_content)
        accumulated_files = user_data.get('accumulated_files', [])
        accumulated_text = user_data.get('accumulated_text', '') or ''

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        if message.photo:
            file_id = message.photo[-1].file_id
            accumulated_files.append(file_id)
        elif message.document:
            file_id = message.document.file_id
            accumulated_files.append(file_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è caption –∫ –º–µ–¥–∏–∞)
        text_to_add = None
        if message.text:
            text_to_add = message.text
        elif message.caption:
            text_to_add = message.caption

        if text_to_add:
            if accumulated_text:
                new_text = accumulated_text + "\n\n" + text_to_add
            else:
                new_text = text_to_add
            accumulated_text = new_text

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(accumulated_files=accumulated_files, accumulated_text=accumulated_text)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        status_message = f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        if accumulated_text:
            status_message += f"üìù –¢–µ–∫—Å—Ç: {len(accumulated_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
        if accumulated_files:
            status_message += f"üìÅ –§–∞–π–ª–æ–≤: {len(accumulated_files)}/5\n"

        status_message += f"\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."

        await message.answer(status_message, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_user_reply_content: {e}")
        try:
            user_id = message.from_user.id if message.from_user else 0
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard(user_id)
            )
            await state.clear()
        except Exception as cleanup_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {cleanup_error}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π


@router.callback_query(F.data == "myhistory_back")
async def back_to_user_history(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await submission_db.init()
    if not submission_db.connection:
        if callback.message:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))
        await callback.answer()
        return
    user_id = callback.from_user.id if callback.from_user else None
    if not user_id:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))
        return
    async with submission_db.connection.cursor() as cursor:
        await cursor.execute('SELECT id, text_content, file_ids, status, created_at FROM submissions WHERE user_id = ? ORDER BY created_at DESC', (user_id,))
        rows = await cursor.fetchall()
    rows = list(rows) if rows else []
    if not rows:
        if callback.message:
            await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.", reply_markup=get_main_keyboard(callback.from_user.id if callback.from_user else 0))
        await callback.answer()
        return
    buttons = []
    for row in rows[:10]:
        sub_id, text, file_ids, status, created_at = row
        preview = (
            text[:30] + "...") if text and len(text) > 30 else (text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
        btn_text = f"{created_at[:16]}: {preview}"
        buttons.append([InlineKeyboardButton(
            text=btn_text, callback_data=f"mymsg_{sub_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    if callback.message:
        await callback.message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=keyboard)
    await callback.answer()
