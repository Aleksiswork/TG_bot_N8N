from aiogram import Router, F, Bot, types
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import Database
from keyboards import (
    get_subscribe_keyboard,
    get_main_keyboard
)
from utils import check_subscription
from config import FILES_DIR, ADMIN_IDS
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
import os
import logging
from database.submissions import SubmissionDB


class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()


class BroadcastState(StatesGroup):
    waiting_message = State()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
submission_db = SubmissionDB()
router = Router()
db = Database()
logger = logging.getLogger(__name__)

# -------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
# -------------------------------


@router.message(F.text == "üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def start_feedback(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ò—Å—Ç–æ—Ä–∏—è" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç + –¥–æ 5 —Ñ–æ—Ç–æ/—Ñ–∞–π–ª–æ–≤). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':",
        reply_markup=keyboard
    )
    await state.set_state(FeedbackStates.waiting_for_feedback)
    await state.update_data(accumulated_files=[], accumulated_text="")


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è' (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ!)
@router.message(FeedbackStates.waiting_for_feedback, F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_user_history(message: types.Message, state: FSMContext, bot: Bot):
    await submission_db.init()
    if not submission_db.connection:
        if message:
            await message.answer("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return
    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    async with submission_db.connection.cursor() as cursor:
        await cursor.execute('SELECT id, text_content, file_ids, status, created_at FROM submissions WHERE user_id = ? ORDER BY created_at DESC', (user_id,))
        rows = await cursor.fetchall()
    rows = list(rows) if rows else []
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    for row in rows[:10]:
        sub_id, text, file_ids, status, created_at = row
        preview = (
            text[:30] + "...") if text and len(text) > 30 else (text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
        btn_text = f"{created_at[:16]}: {preview}"
        buttons.append([InlineKeyboardButton(
            text=btn_text, callback_data=f"mymsg_{sub_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=keyboard)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@router.message(FeedbackStates.waiting_for_feedback, F.photo | F.document | F.text)
async def handle_feedback_content(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        if not message.from_user:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await state.clear()
            return

        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            logger.info("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É")
            await message.answer(
                "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        if message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            logger.info("üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'")
            user_data = await state.get_data()
            accumulated_text = user_data.get('accumulated_text', '') or ''
            accumulated_text = accumulated_text.strip()
            accumulated_files = user_data.get('accumulated_files', [])

            logger.info(
                f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: —Ç–µ–∫—Å—Ç={len(accumulated_text)} —Å–∏–º–≤–æ–ª–æ–≤, —Ñ–∞–π–ª–æ–≤={len(accumulated_files)}")

            if not accumulated_text and not accumulated_files:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç")
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
                        ],
                        resize_keyboard=True
                    )
                )
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
                await submission_db.init()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            logger.info("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            logger.info(f"üë§ User ID: {message.from_user.id}")
            logger.info(
                f"üë§ Username: {message.from_user.username or 'unknown'}")
            logger.info(f"üìù Text: {accumulated_text}")
            logger.info(f"üìÅ Files: {accumulated_files}")

            try:
                await submission_db.add_submission(
                    user_id=message.from_user.id,
                    username=message.from_user.username or "unknown",
                    text=accumulated_text,
                    file_ids=accumulated_files[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ñ–∞–π–ª–∞–º–∏
                )

                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                user_id = message.from_user.id if message.from_user else 0
                await message.answer(
                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
                    reply_markup=get_main_keyboard(user_id)
                )
                await state.clear()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
                user_id = message.from_user.id if message.from_user else 0
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard(user_id)
                )
                await state.clear()
            return

        user_id = message.from_user.id if message.from_user else "unknown"
        username = message.from_user.username if message.from_user else "unknown"
        logger.info(
            f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
        message_type = "—Ç–µ–∫—Å—Ç"
        if message.photo:
            message_type = "—Ñ–æ—Ç–æ"
        elif message.document:
            message_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        if message.caption:
            message_type += " —Å –ø–æ–¥–ø–∏—Å—å—é"
        logger.info(f"üìÑ –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")

        user_data = await state.get_data()
        accumulated_files = user_data.get('accumulated_files', [])
        accumulated_text = user_data.get('accumulated_text', '') or ''

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        if message.photo:
            logger.info("üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ...")
            file_id = message.photo[-1].file_id
            accumulated_files.append(file_id)
            logger.info(f"üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {file_id}")
        elif message.document:
            logger.info("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            file_id = message.document.file_id
            accumulated_files.append(file_id)
            logger.info(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è caption –∫ –º–µ–¥–∏–∞)
        text_to_add = None
        if message.text:
            logger.info("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ message.text...")
            text_to_add = message.text
        elif message.caption:
            logger.info("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ message.caption...")
            text_to_add = message.caption

        if text_to_add:
            logger.info(f"üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç: {text_to_add[:50]}...")
            if accumulated_text:
                new_text = accumulated_text + "\n\n" + text_to_add
            else:
                new_text = text_to_add
            accumulated_text = new_text
            logger.info(
                f"üìù –ò—Ç–æ–≥–æ–≤—ã–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(accumulated_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        await state.update_data(accumulated_files=accumulated_files, accumulated_text=accumulated_text)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        status_message = f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        if accumulated_text:
            status_message += f"üìù –¢–µ–∫—Å—Ç: {len(accumulated_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
        if accumulated_files:
            status_message += f"üìÅ –§–∞–π–ª–æ–≤: {len(accumulated_files)}/5\n"

        status_message += f"\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."

        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await message.answer(status_message, reply_markup=keyboard)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_feedback_content: {e}")
        logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        try:
            user_id = message.from_user.id if message.from_user else 0
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard(user_id)
            )
            await state.clear()
        except Exception as cleanup_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {cleanup_error}")


@router.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏ '–û—Ç–º–µ–Ω–∏—Ç—å'
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':",
        reply_markup=keyboard
    )
    await state.set_state(BroadcastState.waiting_message)
    await state.update_data(accumulated_text="")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–æ–∫ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'/'–û—Ç–º–µ–Ω–∏—Ç—å' –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
@router.message(BroadcastState.waiting_message, F.photo | F.document | F.text)
async def handle_broadcast_content(message: types.Message, state: FSMContext, bot: Bot):
    if not message.from_user or message.from_user.id not in ADMIN_IDS:
        return
    user_id = message.from_user.id
    user_data = await state.get_data()
    accumulated_text = user_data.get('accumulated_text', '') or ''
    accumulated_files = user_data.get(
        'accumulated_files', []) if user_data.get('accumulated_files') else []

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard(user_id)
        )
        await state.clear()
        return

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        accumulated_text = accumulated_text.strip()
        if not accumulated_text and not accumulated_files:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
                    ],
                    resize_keyboard=True
                )
            )
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await db.get_all_users()
        success = 0
        failed = 0
        for user in users:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                for file_id in accumulated_files[:5]:
                    await bot.send_photo(user[0], file_id)
                # –ó–∞—Ç–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
                if accumulated_text:
                    await bot.send_message(user[0], accumulated_text)
                success += 1
            except Exception:
                failed += 1
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
            reply_markup=get_main_keyboard(user_id)
        )
        await state.clear()
        return

    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    if message.photo:
        file_id = message.photo[-1].file_id
        accumulated_files.append(file_id)
    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    elif message.document:
        file_id = message.document.file_id
        accumulated_files.append(file_id)
    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    text_to_add = None
    if message.text and message.text not in ["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]:
        text_to_add = message.text
    elif message.caption:
        text_to_add = message.caption
    if text_to_add:
        if accumulated_text:
            new_text = accumulated_text + "\n" + text_to_add
        else:
            new_text = text_to_add
        accumulated_text = new_text
    await state.update_data(accumulated_text=accumulated_text, accumulated_files=accumulated_files)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status_message = f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
    if accumulated_text:
        status_message += f"üìù –¢–µ–∫—Å—Ç: {len(accumulated_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
    if accumulated_files:
        status_message += f"üìÅ –§–∞–π–ª–æ–≤: {len(accumulated_files)}/5\n"
    status_message += f"\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
    await message.answer(
        status_message,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )


@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î')
async def send_db_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    await db.save_user(message.from_user)

    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'temp.txt')
    try:
        document = FSInputFile(file_path, filename="guide_bd.txt")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞ –ë–î: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == '–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen')
async def send_firewall_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ —Ñ–∞–µ—Ä–≤–æ–ª—É"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    await db.save_user(message.from_user)

    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'bonus.pdf')
    try:
        document = FSInputFile(file_path, filename="bonus.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —Ñ–∞–µ—Ä–≤–æ–ª—É –∏ ssh-keygen")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N')
async def send_n8n_guide(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ N8N"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    await db.save_user(message.from_user)

    file_path = os.path.join(FILES_DIR, 'install.pdf')
    try:
        document = FSInputFile(file_path, filename="install.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ N8N")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# -------------------------------
# –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# -------------------------------


@router.message(F.text == '–§–∏—à–∫–∏')
async def send_tips(message: Message, bot: Bot):
    """–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    await db.save_user(message.from_user)

    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏...")


@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_main(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("mymsg_"))
async def show_user_submission_detail(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await submission_db.init()
    if not submission_db.connection:
        if callback.message:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        await callback.answer()
        return
    if not callback.data:
        await callback.answer()
        return
    sub_id = int(callback.data.split("_")[1])
    async with submission_db.connection.cursor() as cursor:
        await cursor.execute('SELECT text_content, file_ids, status, admin_response, created_at FROM submissions WHERE id = ?', (sub_id,))
        row = await cursor.fetchone()
    if not row:
        if callback.message:
            await callback.message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return
    row = list(row)
    text, file_ids, status, admin_response, created_at = row
    response = f"üí¨ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{sub_id}\n"
    response += f"üìÖ –î–∞—Ç–∞: {created_at}\n\n"
    response += f"üìù –¢–µ–∫—Å—Ç:\n{text or '(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)'}\n\n"
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="myhistory_back")]
    ])
    if callback.message:
        await callback.message.answer(response, reply_markup=back_keyboard)
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    if file_ids:
        import json
        files = json.loads(file_ids)
        for file_id in files[:5]:
            try:
                await bot.send_photo(callback.from_user.id, file_id)
            except Exception:
                pass
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π


@router.callback_query(F.data == "myhistory_back")
async def back_to_user_history(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await submission_db.init()
    if not submission_db.connection:
        if callback.message:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        await callback.answer()
        return
    user_id = callback.from_user.id if callback.from_user else None
    if not user_id:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    async with submission_db.connection.cursor() as cursor:
        await cursor.execute('SELECT id, text_content, file_ids, status, created_at FROM submissions WHERE user_id = ? ORDER BY created_at DESC', (user_id,))
        rows = await cursor.fetchall()
    rows = list(rows) if rows else []
    if not rows:
        if callback.message:
            await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        await callback.answer()
        return
    buttons = []
    for row in rows[:10]:
        sub_id, text, file_ids, status, created_at = row
        preview = (
            text[:30] + "...") if text and len(text) > 30 else (text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
        btn_text = f"{created_at[:16]}: {preview}"
        buttons.append([InlineKeyboardButton(
            text=btn_text, callback_data=f"mymsg_{sub_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=keyboard)
    await callback.answer()
