"""
Telegram Bot v1.0
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
- –†–∞–∑–¥–∞—á–∞ –≥–∞–π–¥–æ–≤ (!–ë–î, !–§–∏—à–∫–∏)
- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (/stats, /version)
- –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SQLite
"""
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton
)
from aiogram.enums import ChatMemberStatus
from dotenv import load_dotenv
import asyncio
import logging
import os
import aiosqlite
from datetime import datetime


class BroadcastState(StatesGroup):
    waiting_message = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_VERSION = "1.2"
CHANNEL_USERNAME = "@Info_IT_news"
CHANNEL_LINK = "https://t.me/Info_IT_news"
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
FILES_DIR = "d:/vps/VSCode/tgbot/files/"
DB_NAME = "bot_users.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=f'%(asctime)s - %(name)s - v{BOT_VERSION} - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ======================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ======================


def get_subscribe_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)]
        ]
    )


def get_main_keyboard(user_id: int):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–∞–∑–Ω–æ–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="!–ë–î"), KeyboardButton(text="!–§–∏—à–∫–∏")],
        ],
        resize_keyboard=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if user_id == ADMIN_ID:
        keyboard.keyboard.append([KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")])

    return keyboard


def get_admin_keyboard():
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
             KeyboardButton(text="üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞")],
            [KeyboardButton(text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# ======================
# –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# ======================


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TEXT,
                last_active TEXT
            )
        ''')
        await db.commit()


async def save_user(user: types.User):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    async with aiosqlite.connect(DB_NAME) as db:
        now = datetime.now().isoformat()
        cursor = await db.execute("SELECT 1 FROM users WHERE user_id = ?", (user.id,))
        exists = await cursor.fetchone()

        if exists:
            await db.execute(
                "UPDATE users SET username=?, first_name=?, last_name=?, last_active=? WHERE user_id=?",
                (user.username, user.first_name, user.last_name, now, user.id)
            )
        else:
            await db.execute(
                "INSERT INTO users (user_id, username, first_name, last_name, created_at, last_active) VALUES (?, ?, ?, ?, ?, ?)",
                (user.id, user.username, user.first_name, user.last_name, now, now)
            )
        await db.commit()

# ======================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================


async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ======================


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await save_user(message.from_user)

    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –≥–∞–π–¥–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"

    # –†–∞–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
    if message.from_user.id == ADMIN_ID:
        text += "\n\n‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é"

    await message.answer(
        text,
        reply_markup=get_main_keyboard(message.from_user.id)
    )


@dp.message(F.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
async def admin_panel(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_keyboard()
    )


@dp.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_main(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


@dp.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_handler(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return

    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT COUNT(*) FROM users")
        total_users = (await cursor.fetchone())[0]

        cursor = await db.execute("""
            SELECT first_name, username, last_active 
            FROM users 
            ORDER BY last_active DESC 
            LIMIT 5
        """)
        recent_users = await cursor.fetchall()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (v{BOT_VERSION}):\n"
    stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
    stats_text += "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:\n"

    for user in recent_users:
        stats_text += f"- {user[0]} (@{user[1]}) - {user[2][:10]}\n"

    await message.answer(stats_text)


@dp.message(F.text == 'üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞')
async def version_handler(message: types.Message):
    """–ü–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer(f"üîß –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {BOT_VERSION}")


@dp.message(F.text == '!–ë–î')
async def send_db_guide(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    await save_user(message.from_user)

    if not await check_subscription(message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'temp.txt')
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError
        document = FSInputFile(file_path, filename="guide_bd.txt")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(F.text == '!–§–∏—à–∫–∏')
async def send_tips(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ–∏—à–µ–∫"""
    await save_user(message.from_user)

    if not await check_subscription(message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏...")


# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–°–´–õ–ö–ò
# ======================


@dp.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_handler(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BroadcastState.waiting_message)


@dp.message(BroadcastState.waiting_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    await state.clear()

    if message.from_user.id != ADMIN_ID:
        return

    sender_id = message.from_user.id
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=get_admin_keyboard())

    try:
        async with aiosqlite.connect(DB_NAME) as db:
            cursor = await db.execute("SELECT user_id FROM users WHERE user_id != ?", (sender_id,))
            users = await cursor.fetchall()

        results = {"success": 0, "failed": 0}

        for user in users:
            try:
                await bot.send_message(user[0], message.text)
                results["success"] += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                results["failed"] += 1

        report = (
            f"üìä –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {results['failed']}"
        )

        await message.answer(report, reply_markup=get_admin_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_admin_keyboard()
        )


# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await init_db()
    logger.info(f"üöÄ –ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())


# from aiogram import Bot, Dispatcher, types, F
# from aiogram.filters import Command
# from aiogram.types import (
#     FSInputFile,
#     InlineKeyboardMarkup,
#     InlineKeyboardButton,
#     ReplyKeyboardMarkup,
#     KeyboardButton
# )
# from aiogram.enums import ChatMemberStatus
# from dotenv import load_dotenv
# import asyncio
# import logging
# import os
# import aiosqlite
# from datetime import datetime

# load_dotenv()

# # –í–µ—Ä—Å–∏—è 1.0 (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
# __version__ = "1.0"

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO,
#                     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# logger = logging.getLogger(__name__)

# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
# CHANNEL_USERNAME = "@Info_IT_news"
# CHANNEL_LINK = "https://t.me/Info_IT_news"
# BOT_TOKEN = os.getenv("BOT_TOKEN")
# ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# FILES_DIR = "d:/vps/VSCode/tgbot/files/"
# DB_NAME = "bot_users.db"

# bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher()


# def get_subscribe_keyboard():
#     return InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(
#                 text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
#             [InlineKeyboardButton(
#                 text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
#         ]
#     )


# async def init_db():
#     async with aiosqlite.connect(DB_NAME) as db:
#         await db.execute('''
#             CREATE TABLE IF NOT EXISTS users (
#                 user_id INTEGER PRIMARY KEY,
#                 username TEXT,
#                 first_name TEXT,
#                 last_name TEXT,
#                 created_at TEXT,
#                 last_active TEXT
#             )
#         ''')
#         await db.commit()


# async def save_user(user: types.User):
#     async with aiosqlite.connect(DB_NAME) as db:
#         now = datetime.now().isoformat()
#         cursor = await db.execute("SELECT 1 FROM users WHERE user_id = ?", (user.id,))
#         exists = await cursor.fetchone()

#         if exists:
#             await db.execute(
#                 "UPDATE users SET username=?, first_name=?, last_name=?, last_active=? WHERE user_id=?",
#                 (user.username, user.first_name, user.last_name, now, user.id)
#             )
#         else:
#             await db.execute(
#                 "INSERT INTO users (user_id, username, first_name, last_name, created_at, last_active) VALUES (?, ?, ?, ?, ?, ?)",
#                 (user.id, user.username, user.first_name, user.last_name, now, now)
#             )
#         await db.commit()


# async def check_subscription(user_id: int) -> bool:
#     try:
#         member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
#         return member.status in [
#             ChatMemberStatus.MEMBER,
#             ChatMemberStatus.ADMINISTRATOR,
#             ChatMemberStatus.CREATOR
#         ]
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
#         return False


# @dp.message(Command("start"))
# async def start_handler(message: types.Message):
#     await save_user(message.from_user)
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –≥–∞–π–¥–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n\n"
#         "!–ë–î - –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö\n"
#         "!–§–∏—à–∫–∏ - –ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏\n\n"
#         "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
#         reply_markup=get_subscribe_keyboard()
#     )


# @dp.message(F.text == '!–ë–î')
# async def send_db_guide(message: types.Message):
#     await save_user(message.from_user)
#     if not await check_subscription(message.from_user.id):
#         await message.answer(
#             "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
#             reply_markup=get_subscribe_keyboard()
#         )
#         return

#     file_path = os.path.join(FILES_DIR, 'temp.txt')
#     try:
#         if not os.path.exists(file_path):
#             raise FileNotFoundError
#         document = FSInputFile(file_path, filename="guide_bd.txt")
#         await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
#     except FileNotFoundError:
#         await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# @dp.message(F.text == '!–§–∏—à–∫–∏')
# async def send_tips(message: types.Message):
#     await save_user(message.from_user)
#     if not await check_subscription(message.from_user.id):
#         await message.answer(
#             "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
#             reply_markup=get_subscribe_keyboard()
#         )
#         return
#     await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏...")


# @dp.message(Command("version"))
# async def version_handler(message: types.Message):
#     """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
#     if message.from_user.id == ADMIN_ID:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ .env
#         await message.answer(f"üîß –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {__version__}")
#     else:
#         await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


# @dp.message(Command("stats"))
# async def stats_handler(message: types.Message):
#     """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     async with aiosqlite.connect(DB_NAME) as db:
#         # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
#         cursor = await db.execute("SELECT COUNT(*) FROM users")
#         total_users = (await cursor.fetchone())[0]

#         # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#         cursor = await db.execute("""
#             SELECT user_id, username, first_name, last_name, last_active
#             FROM users
#             ORDER BY last_active DESC
#             LIMIT 5
#         """)
#         recent_users = await cursor.fetchall()

#     stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
#     stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
#     stats_text += "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"

#     for user in recent_users:
#         username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
#         stats_text += f"- {user[2]} {user[3] or ''} ({username}) - {user[4][:10]}\n"

#     await message.answer(stats_text)


# async def main():
#     await init_db()
#     logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {__version__})")
#     try:
#         await dp.start_polling(bot)
#     finally:
#         await bot.session.close()
#         logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# if __name__ == "__main__":
#     asyncio.run(main())
