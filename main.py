from aiogram import Bot, Dispatcher, F
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN, BOT_VERSION, FILES_DIR
from database import Database
from keyboards import get_subscribe_keyboard, get_main_keyboard, get_admin_keyboard
import asyncio
import logging
import os
from handlers.common import router as common_router
from handlers.user import router as user_router
from handlers.admin import router as admin_router
from database.submissions import SubmissionDB
from config import DB_SUBMISSIONS_PATH


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(FILES_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=f'%(asctime)s - %(name)s - v{BOT_VERSION} - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ INFO-–ª–æ–≥–∏ –æ—Ç aiogram.event
logging.getLogger("aiogram.event").setLevel(logging.WARNING)
# –û—Ç–∫–ª—é—á–∞–µ–º INFO-–ª–æ–≥–∏ –æ—Ç handlers.user
logging.getLogger("handlers.user").setLevel(logging.WARNING)
logging.getLogger("handlers.admin").setLevel(logging.WARNING)
logging.getLogger("database.db").setLevel(logging.WARNING)
logging.getLogger("database.submissions").setLevel(logging.WARNING)


class BroadcastState(StatesGroup):
    waiting_message = State()


# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ë–î –∏ —Ç–∞–±–ª–∏—Ü –î–û –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    from database.db import Database
    await Database.init_all()

    # –Ø–≤–Ω–æ —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä SubmissionDB –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    from database.submissions import SubmissionDB
    submission_db = SubmissionDB()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ config.py)
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –ü–ï–†–ï–î —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞
    dp.include_router(common_router)
    dp.include_router(user_router)
    dp.include_router(admin_router)

    logger.info(f"üöÄ –ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)  # –¢–µ–ø–µ—Ä—å –±–æ—Ç –≤–∏–¥–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        await submission_db.close()
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
