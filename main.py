from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile,
    ReplyKeyboardRemove
)
from aiogram.enums import ChatMemberStatus
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import BOT_TOKEN, ADMIN_ID, BOT_VERSION, FILES_DIR, CHANNEL_USERNAME, CHANNEL_LINK
from database.db import Database
from keyboards import get_subscribe_keyboard, get_main_keyboard, get_admin_keyboard
import asyncio
import logging
import os
import csv
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(FILES_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=f'%(asctime)s - %(name)s - v{BOT_VERSION} - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


class BroadcastState(StatesGroup):
    waiting_message = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ======================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================


async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ======================


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await db.save_user(message.from_user)

    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –≥–∞–π–¥–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"

    if message.from_user.id == ADMIN_ID:
        text += "\n\n‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é"

    await message.answer(
        text,
        reply_markup=get_main_keyboard(message.from_user.id)
    )


@dp.message(F.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
async def admin_panel(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_keyboard()
    )


@dp.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_main(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


@dp.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_handler(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return

    total_users, recent_users = await db.get_users_stats()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (v{BOT_VERSION}):\n"
    stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
    stats_text += "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:\n"

    for user in recent_users:
        stats_text += f"- {user[0]} (@{user[1]}) - {user[2][:10]}\n"

    await message.answer(stats_text)


@dp.message(F.text == 'üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞')
async def version_handler(message: types.Message):
    """–ü–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer(f"üîß –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {BOT_VERSION}")


@dp.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
async def export_db_csv_handler(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –ë–î –≤ CSV"""
    if message.from_user.id != ADMIN_ID:
        return

    temp_file = None
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"bot_users_export_{timestamp}.csv"
        temp_file = os.path.join(FILES_DIR, filename)

        users = await db.get_all_users()

        if not users:
            await message.answer("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
            writer = csv.writer(f, delimiter=';', quoting=csv.QUOTE_ALL)
            writer.writerow(['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è',
                             '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])
            for user in users:
                writer.writerow([
                    user[0],
                    f'"{user[1]}"' if user[1] else '',
                    f'"{user[2]}"' if user[2] else '',
                    f'"{user[3]}"' if user[3] else '',
                    user[4],
                    user[5]
                ])

        file_size = os.path.getsize(temp_file) / (1024 * 1024)
        if file_size > 45:
            await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (>45 –ú–ë)")
            return

        document = FSInputFile(temp_file, filename=filename)
        await message.answer_document(
            document,
            caption=(
                f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ë–î ({len(users)} –∑–∞–ø–∏—Å–µ–π, v{BOT_VERSION})\n"
                f"‚ÑπÔ∏è –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel:\n"
                f"1. '–î–∞–Ω–Ω—ã–µ' ‚Üí '–ò–∑ —Ç–µ–∫—Å—Ç–∞/CSV'\n"
                f"2. –ö–æ–¥–∏—Ä–æ–≤–∫–∞: 65001 UTF-8\n"
                f"3. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π"
            )
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    finally:
        if temp_file and os.path.exists(temp_file):
            os.remove(temp_file)


@dp.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BroadcastState.waiting_message)


@dp.message(BroadcastState.waiting_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.clear()

    if message.from_user.id != ADMIN_ID:
        return

    sender_id = message.from_user.id
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=get_admin_keyboard())

    try:
        users = await db.get_all_users()
        user_ids = [user[0] for user in users if user[0] != sender_id]

        results = {"success": 0, "failed": 0}

        for user_id in user_ids:
            try:
                await bot.send_message(user_id, message.text)
                results["success"] += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                results["failed"] += 1

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {results['failed']}",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}",
            reply_markup=get_admin_keyboard()
        )


@dp.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î')
async def send_db_guide(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    await db.save_user(message.from_user)

    if not await check_subscription(message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'temp.txt')
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError
        document = FSInputFile(file_path, filename="guide_bd.txt")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(F.text == '–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen')
async def send_firewall_guide(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ —Ñ–∞–µ—Ä–≤–æ–ª—É"""
    await db.save_user(message.from_user)

    if not await check_subscription(message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    file_path = os.path.join(FILES_DIR, 'bonus.pdf')
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError
        document = FSInputFile(file_path, filename="bonus.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∞–µ—Ä–≤–æ–ª–∞ –∏ ssh-keygen")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(F.text == '–§–∏—à–∫–∏')
async def send_tips(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ–∏—à–µ–∫"""
    await db.save_user(message.from_user)

    if not await check_subscription(message.from_user.id):
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscribe_keyboard()
        )
        return

    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏...")


@dp.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N')
async def send_n8n_guide(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ N8N"""
    await db.save_user(message.from_user)

    file_path = os.path.join(FILES_DIR, 'install.pdf')
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError
        document = FSInputFile(file_path, filename="install.pdf")
        await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ N8N –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await db.init_db()
    logger.info(f"üöÄ –ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
# """
# Telegram Bot v1.4
# –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
# - –†–∞–∑–Ω–µ—Å–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ –º–æ–¥—É–ª—è–º
# - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ config.py
# - –†–∞–±–æ—Ç–∞ —Å –ë–î –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ database/db.py
# """

# from aiogram import Bot, Dispatcher, types, F
# from aiogram.filters import Command
# from aiogram.types import (
#     FSInputFile,
#     InlineKeyboardMarkup,
#     InlineKeyboardButton,
#     ReplyKeyboardMarkup,
#     KeyboardButton,
#     ReplyKeyboardRemove
# )
# from aiogram.enums import ChatMemberStatus
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.context import FSMContext
# from config import BOT_TOKEN, ADMIN_ID, BOT_VERSION, FILES_DIR, CHANNEL_USERNAME, CHANNEL_LINK
# from database.db import Database
# import asyncio
# import logging
# import os
# import csv
# from datetime import datetime

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# db = Database()

# # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
# os.makedirs(FILES_DIR, exist_ok=True)

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,
#     format=f'%(asctime)s - %(name)s - v{BOT_VERSION} - %(levelname)s - %(message)s'
# )
# logger = logging.getLogger(__name__)

# # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


# class BroadcastState(StatesGroup):
#     waiting_message = State()


# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher()

# # ======================
# # –ö–õ–ê–í–ò–ê–¢–£–†–´
# # ======================


# def get_subscribe_keyboard():
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
#     return InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)]
#         ]
#     )


# def get_main_keyboard(user_id: int):
#     """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–∞–∑–Ω–æ–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
#     keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î"), KeyboardButton(
#                 text="–§–∏—à–∫–∏"), KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N"), KeyboardButton(text="–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen"), ],
#         ],
#         resize_keyboard=True
#     )

#     if user_id == ADMIN_ID:
#         keyboard.keyboard.append([KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")])

#     return keyboard


# def get_admin_keyboard():
#     """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
#     return ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
#              KeyboardButton(text="üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞")],
#             [KeyboardButton(text="üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)")],
#             [KeyboardButton(text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")],
#             [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
#         ],
#         resize_keyboard=True
#     )

# # ======================
# # –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# # ======================


# async def check_subscription(user_id: int) -> bool:
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
#     try:
#         member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
#         return member.status in [
#             ChatMemberStatus.MEMBER,
#             ChatMemberStatus.ADMINISTRATOR,
#             ChatMemberStatus.CREATOR
#         ]
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
#         return False

# # ======================
# # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# # ======================


# @dp.message(Command("start"))
# async def start_handler(message: types.Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
#     await db.save_user(message.from_user)

#     text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –≥–∞–π–¥–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"

#     if message.from_user.id == ADMIN_ID:
#         text += "\n\n‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é"

#     await message.answer(
#         text,
#         reply_markup=get_main_keyboard(message.from_user.id)
#     )


# @dp.message(F.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
# async def admin_panel(message: types.Message):
#     """–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     await message.answer(
#         "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
#         reply_markup=get_admin_keyboard()
#     )


# @dp.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
# async def back_to_main(message: types.Message):
#     """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
#     await message.answer(
#         "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
#         reply_markup=get_main_keyboard(message.from_user.id)
#     )


# @dp.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
# async def stats_handler(message: types.Message):
#     """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     total_users, recent_users = await db.get_users_stats()

#     stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (v{BOT_VERSION}):\n"
#     stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
#     stats_text += "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:\n"

#     for user in recent_users:
#         stats_text += f"- {user[0]} (@{user[1]}) - {user[2][:10]}\n"

#     await message.answer(stats_text)


# @dp.message(F.text == 'üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞')
# async def version_handler(message: types.Message):
#     """–ü–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     await message.answer(f"üîß –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {BOT_VERSION}")


# @dp.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
# async def export_db_csv_handler(message: types.Message):
#     """–≠–∫—Å–ø–æ—Ä—Ç –ë–î –≤ CSV"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     temp_file = None
#     try:
#         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#         filename = f"bot_users_export_{timestamp}.csv"
#         temp_file = os.path.join(FILES_DIR, filename)

#         users = await db.get_all_users()

#         if not users:
#             await message.answer("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
#             return

#         with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
#             writer = csv.writer(f, delimiter=';', quoting=csv.QUOTE_ALL)
#             writer.writerow(['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è',
#                              '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])
#             for user in users:
#                 writer.writerow([
#                     user[0],
#                     f'"{user[1]}"' if user[1] else '',
#                     f'"{user[2]}"' if user[2] else '',
#                     f'"{user[3]}"' if user[3] else '',
#                     user[4],
#                     user[5]
#                 ])

#         file_size = os.path.getsize(temp_file) / (1024 * 1024)
#         if file_size > 45:
#             await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (>45 –ú–ë)")
#             return

#         document = FSInputFile(temp_file, filename=filename)
#         await message.answer_document(
#             document,
#             caption=(
#                 f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ë–î ({len(users)} –∑–∞–ø–∏—Å–µ–π, v{BOT_VERSION})\n"
#                 f"‚ÑπÔ∏è –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel:\n"
#                 f"1. '–î–∞–Ω–Ω—ã–µ' ‚Üí '–ò–∑ —Ç–µ–∫—Å—Ç–∞/CSV'\n"
#                 f"2. –ö–æ–¥–∏—Ä–æ–≤–∫–∞: 65001 UTF-8\n"
#                 f"3. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π"
#             )
#         )

#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
#     finally:
#         if temp_file and os.path.exists(temp_file):
#             os.remove(temp_file)


# @dp.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
# async def broadcast_handler(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     await message.answer(
#         "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
#         reply_markup=ReplyKeyboardRemove()
#     )
#     await state.set_state(BroadcastState.waiting_message)


# @dp.message(BroadcastState.waiting_message)
# async def process_broadcast_message(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
#     await state.clear()

#     if message.from_user.id != ADMIN_ID:
#         return

#     sender_id = message.from_user.id
#     await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=get_admin_keyboard())

#     try:
#         async with aiosqlite.connect(DB_NAME) as db_conn:
#             cursor = await db_conn.execute("SELECT user_id FROM users WHERE user_id != ?", (sender_id,))
#             users = await cursor.fetchall()

#         results = {"success": 0, "failed": 0}

#         for user in users:
#             try:
#                 await bot.send_message(user[0], message.text)
#                 results["success"] += 1
#                 await asyncio.sleep(0.1)
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
#                 results["failed"] += 1

#         await message.answer(
#             f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
#             f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
#             f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
#             f"‚Ä¢ –û—à–∏–±–æ–∫: {results['failed']}",
#             reply_markup=get_admin_keyboard()
#         )
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
#         await message.answer(
#             f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}",
#             reply_markup=get_admin_keyboard()
#         )

# # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)


# async def main():
#     """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
#     await db.init_db()
#     logger.info(f"üöÄ –ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω")
#     try:
#         await dp.start_polling(bot)
#     finally:
#         await bot.session.close()
#         logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# if __name__ == "__main__":
#     asyncio.run(main())


# ------------------------------------------------------------------------

# from aiogram import Bot, Dispatcher, types, F
# from aiogram.filters import Command
# from aiogram.types import (
#     FSInputFile,
#     InlineKeyboardMarkup,
#     InlineKeyboardButton,
#     ReplyKeyboardMarkup,
#     KeyboardButton,
#     ReplyKeyboardRemove
# )
# from aiogram.enums import ChatMemberStatus
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.context import FSMContext
# from config import BOT_TOKEN, ADMIN_ID, BOT_VERSION, FILES_DIR, DB_NAME, CHANNEL_USERNAME, CHANNEL_LINK
# import asyncio
# import logging
# import os
# import aiosqlite
# import csv
# from datetime import datetime
# from database.db import Database

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,
#     format=f'%(asctime)s - %(name)s - v{BOT_VERSION} - %(levelname)s - %(message)s'
# )
# logger = logging.getLogger(__name__)

# # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


# class BroadcastState(StatesGroup):
#     waiting_message = State()


# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher()
# db = Database()

# # ======================
# # –ö–õ–ê–í–ò–ê–¢–£–†–´
# # ======================


# def get_subscribe_keyboard():
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
#     return InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)]
#         ]
#     )


# def get_main_keyboard(user_id: int):
#     """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–∞–∑–Ω–æ–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
#     keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î"), KeyboardButton(
#                 text="–§–∏—à–∫–∏"), KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N"), KeyboardButton(text="–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen"), ],
#         ],
#         resize_keyboard=True
#     )

#     if user_id == ADMIN_ID:
#         keyboard.keyboard.append([KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")])

#     return keyboard


# def get_admin_keyboard():
#     """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
#     return ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
#              KeyboardButton(text="üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞")],
#             [KeyboardButton(text="üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)")],
#             [KeyboardButton(text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")],
#             [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
#         ],
#         resize_keyboard=True
#     )

# # ======================
# # –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# # ======================


# async def init_db():
#     """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
#     async with aiosqlite.connect(DB_NAME) as db:
#         await db.execute('''
#             CREATE TABLE IF NOT EXISTS users (
#                 user_id INTEGER PRIMARY KEY,
#                 username TEXT,
#                 first_name TEXT,
#                 last_name TEXT,
#                 created_at TEXT,
#                 last_active TEXT
#             )
#         ''')
#         await db.commit()


# async def save_user(user: types.User):
#     """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
#     async with aiosqlite.connect(DB_NAME) as db:
#         now = datetime.now().isoformat()
#         cursor = await db.execute("SELECT 1 FROM users WHERE user_id = ?", (user.id,))
#         exists = await cursor.fetchone()

#         if exists:
#             await db.execute(
#                 "UPDATE users SET username=?, first_name=?, last_name=?, last_active=? WHERE user_id=?",
#                 (user.username, user.first_name, user.last_name, now, user.id)
#             )
#         else:
#             await db.execute(
#                 "INSERT INTO users (user_id, username, first_name, last_name, created_at, last_active) VALUES (?, ?, ?, ?, ?, ?)",
#                 (user.id, user.username, user.first_name, user.last_name, now, now)
#             )
#         await db.commit()

# # ======================
# # –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# # ======================


# async def check_subscription(user_id: int) -> bool:
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
#     try:
#         member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
#         return member.status in [
#             ChatMemberStatus.MEMBER,
#             ChatMemberStatus.ADMINISTRATOR,
#             ChatMemberStatus.CREATOR
#         ]
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
#         return False

# # ======================
# # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# # ======================


# @dp.message(Command("start"))
# async def start_handler(message: types.Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
#     await db.save_user(message.from_user)

#     text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –≥–∞–π–¥–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"

#     if message.from_user.id == ADMIN_ID:
#         text += "\n\n‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é"

#     await message.answer(
#         text,
#         reply_markup=get_main_keyboard(message.from_user.id)
#     )


# @dp.message(F.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
# async def admin_panel(message: types.Message):
#     """–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     await message.answer(
#         "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
#         reply_markup=get_admin_keyboard()
#     )


# @dp.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
# async def back_to_main(message: types.Message):
#     """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
#     await message.answer(
#         "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
#         reply_markup=get_main_keyboard(message.from_user.id)
#     )


# @dp.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
# async def stats_handler(message: types.Message):
#     """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     async with aiosqlite.connect(DB_NAME) as db:
#         cursor = await db.execute("SELECT COUNT(*) FROM users")
#         total_users = (await cursor.fetchone())[0]

#         cursor = await db.execute("""
#             SELECT first_name, username, last_active
#             FROM users
#             ORDER BY last_active DESC
#             LIMIT 5
#         """)
#         recent_users = await cursor.fetchall()

#     stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (v{BOT_VERSION}):\n"
#     stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
#     stats_text += "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:\n"

#     for user in recent_users:
#         stats_text += f"- {user[0]} (@{user[1]}) - {user[2][:10]}\n"

#     await message.answer(stats_text)


# @dp.message(F.text == 'üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞')
# async def version_handler(message: types.Message):
#     """–ü–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     await message.answer(f"üîß –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {BOT_VERSION}")


# @dp.message(F.text == 'üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î (CSV)')
# async def export_db_csv_handler(message: types.Message):
#     """–≠–∫—Å–ø–æ—Ä—Ç –ë–î –≤ CSV (–≤–µ—Ä—Å–∏—è 1.3)"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     temp_file = None
#     try:
#         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#         filename = f"bot_users_export_{timestamp}.csv"
#         temp_file = os.path.join(FILES_DIR, filename)

#         async with aiosqlite.connect(DB_NAME) as db:
#             cursor = await db.execute("SELECT * FROM users")
#             users = await cursor.fetchall()

#             if not users:
#                 await message.answer("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
#                 return

#             with open(temp_file, 'w', encoding='utf-8-sig', newline='') as f:
#                 writer = csv.writer(f, delimiter=';', quoting=csv.QUOTE_ALL)
#                 writer.writerow(['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è',
#                                 '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])
#                 for user in users:
#                     writer.writerow([
#                         user[0],
#                         f'"{user[1]}"' if user[1] else '',
#                         f'"{user[2]}"' if user[2] else '',
#                         f'"{user[3]}"' if user[3] else '',
#                         user[4],
#                         user[5]
#                     ])

#         file_size = os.path.getsize(temp_file) / (1024 * 1024)
#         if file_size > 45:
#             await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (>45 –ú–ë)")
#             return

#         document = FSInputFile(temp_file, filename=filename)
#         await message.answer_document(
#             document,
#             caption=(
#                 f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ë–î ({len(users)} –∑–∞–ø–∏—Å–µ–π, v{BOT_VERSION})\n"
#                 f"‚ÑπÔ∏è –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel:\n"
#                 f"1. '–î–∞–Ω–Ω—ã–µ' ‚Üí '–ò–∑ —Ç–µ–∫—Å—Ç–∞/CSV'\n"
#                 f"2. –ö–æ–¥–∏—Ä–æ–≤–∫–∞: 65001 UTF-8\n"
#                 f"3. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π"
#             )
#         )

#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
#     finally:
#         if temp_file and os.path.exists(temp_file):
#             os.remove(temp_file)


# @dp.message(F.text == '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
# async def broadcast_handler(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
#     if message.from_user.id != ADMIN_ID:
#         return

#     await message.answer(
#         "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
#         reply_markup=ReplyKeyboardRemove()
#     )
#     await state.set_state(BroadcastState.waiting_message)


# @dp.message(BroadcastState.waiting_message)
# async def process_broadcast_message(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
#     await state.clear()

#     if message.from_user.id != ADMIN_ID:
#         return

#     sender_id = message.from_user.id
#     await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=get_admin_keyboard())

#     try:
#         async with aiosqlite.connect(DB_NAME) as db:
#             cursor = await db.execute("SELECT user_id FROM users WHERE user_id != ?", (sender_id,))
#             users = await cursor.fetchall()

#         results = {"success": 0, "failed": 0}

#         for user in users:
#             try:
#                 await bot.send_message(user[0], message.text)
#                 results["success"] += 1
#                 await asyncio.sleep(0.1)
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
#                 results["failed"] += 1

#         await message.answer(
#             f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
#             f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
#             f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
#             f"‚Ä¢ –û—à–∏–±–æ–∫: {results['failed']}",
#             reply_markup=get_admin_keyboard()
#         )
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
#         await message.answer(
#             f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}",
#             reply_markup=get_admin_keyboard()
#         )


# @dp.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î')
# async def send_db_guide(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
#     await save_user(message.from_user)

#     if not await check_subscription(message.from_user.id):
#         await message.answer(
#             "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
#             reply_markup=get_subscribe_keyboard()
#         )
#         return

#     file_path = os.path.join(FILES_DIR, 'temp.txt')
#     try:
#         if not os.path.exists(file_path):
#             raise FileNotFoundError
#         document = FSInputFile(file_path, filename="guide_bd.txt")
#         await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
#     except FileNotFoundError:
#         await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# @dp.message(F.text == '–§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen')
# async def send_db_guide(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –§–∞–µ—Ä–≤–æ–ª –∏ ssh-keygen"""
#     await save_user(message.from_user)

#     if not await check_subscription(message.from_user.id):
#         await message.answer(
#             "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
#             reply_markup=get_subscribe_keyboard()
#         )
#         return

#     file_path = os.path.join(FILES_DIR, 'bonus.pdf')
#     try:
#         if not os.path.exists(file_path):
#             raise FileNotFoundError
#         document = FSInputFile(file_path, filename="bonus.pdf")
#         await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∞–µ—Ä–≤–æ–ª–∞ –∏ ssh-keygen")
#     except FileNotFoundError:
#         await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# @dp.message(F.text == '–§–∏—à–∫–∏')
# async def send_tips(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ–∏—à–µ–∫"""
#     await save_user(message.from_user)

#     if not await check_subscription(message.from_user.id):
#         await message.answer(
#             "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
#             reply_markup=get_subscribe_keyboard()
#         )
#         return

#     await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏—à–∫–∏...")


# @dp.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N')
# async def send_tips(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ–∏—à–µ–∫"""
#     await save_user(message.from_user)

#     file_path = os.path.join(FILES_DIR, 'install.pdf')
#     try:
#         if not os.path.exists(file_path):
#             raise FileNotFoundError
#         document = FSInputFile(file_path, filename="install.pdf")
#         await message.answer_document(document, caption="üìö –ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ N8N –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
#     except FileNotFoundError:
#         await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –≥–∞–π–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# # ======================
# # –ó–ê–ü–£–°–ö –ë–û–¢–ê
# # ======================

# async def main():
#     """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
#     await db.init_db()
#     logger.info(f"üöÄ –ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω")
#     try:
#         await dp.start_polling(bot)
#     finally:
#         await bot.session.close()
#         logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# if __name__ == "__main__":
#     asyncio.run(main())

# # async def main():
# #     """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
# #     await init_db()
# #     logger.info(f"üöÄ –ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω")
# #     try:
# #         await dp.start_polling(bot)
# #     finally:
# #         await bot.session.close()
# #         logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# # if __name__ == "__main__":
# #     asyncio.run(main())
