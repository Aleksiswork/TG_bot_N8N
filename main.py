"""
Telegram Bot v3.0 - Main Entry Point
–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 1000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.state import State, StatesGroup
from config import config, BOT_VERSION
from database import Database
from keyboards import get_subscribe_keyboard, get_main_keyboard, get_admin_keyboard
import asyncio
import logging
import os
import time
import psutil
import signal
import sys
import threading
from handlers.common import router as common_router
from handlers.user import router as user_router, set_bot_instance
from handlers.admin import router as admin_router
from database.submissions import SubmissionDB
from database.banned import BannedDB
from contextlib import asynccontextmanager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(config.files_dir, exist_ok=True)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger("aiogram.event").setLevel(logging.WARNING)
logging.getLogger("handlers.user").setLevel(logging.WARNING)
logging.getLogger("handlers.admin").setLevel(logging.WARNING)
logging.getLogger("database.db").setLevel(logging.WARNING)
logging.getLogger("database.submissions").setLevel(logging.WARNING)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_event = asyncio.Event()


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    shutdown_event.set()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
if threading.current_thread() is threading.main_thread():
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


class BroadcastState(StatesGroup):
    waiting_message = State()


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""

    def __init__(self):
        self.start_time = time.time()
        self.request_count = 0
        self.error_count = 0
        self.last_report_time = time.time()

    def increment_request(self):
        self.request_count += 1

    def increment_error(self):
        self.error_count += 1

    def get_stats(self):
        uptime = time.time() - self.start_time
        requests_per_minute = (self.request_count /
                               uptime) * 60 if uptime > 0 else 0
        error_rate = (self.error_count / self.request_count *
                      100) if self.request_count > 0 else 0

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()

        return {
            'uptime_hours': uptime / 3600,
            'requests_per_minute': requests_per_minute,
            'error_rate': error_rate,
            'cpu_percent': cpu_percent,
            'memory_percent': memory.percent,
            'memory_available_gb': memory.available / (1024**3)
        }

    def log_performance(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        stats = self.get_stats()
        logger.info(
            f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "
            f"Uptime: {stats['uptime_hours']:.1f}—á, "
            f"RPM: {stats['requests_per_minute']:.1f}, "
            f"Errors: {stats['error_rate']:.1f}%, "
            f"CPU: {stats['cpu_percent']:.1f}%, "
            f"RAM: {stats['memory_percent']:.1f}% "
            f"({stats['memory_available_gb']:.1f}GB free)"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performance_monitor = PerformanceMonitor()


@asynccontextmanager
async def lifespan():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ v{BOT_VERSION}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ë–î –∏ —Ç–∞–±–ª–∏—Ü –î–û –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    await Database.init_all()

    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ë–î –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    submission_db = SubmissionDB()
    banned_db = BannedDB()

    try:
        yield submission_db
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        await submission_db.close()
        await banned_db.close()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        db = Database()
        await db.close_all_connections()

        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def setup_bot() -> tuple[Bot, Dispatcher]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not config.token:
        raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    bot = Bot(
        token=config.token,
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        session_timeout=60,
        connect_timeout=30,
        read_timeout=30,
        write_timeout=30,
        pool_timeout=30
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    set_bot_instance(bot)

    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(common_router)
    dp.include_router(user_router)
    dp.include_router(admin_router)

    return bot, dp


async def performance_monitoring_task():
    """–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    while True:
        try:
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            performance_monitor.log_performance()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        async with lifespan() as submission_db:
            bot, dp = await setup_bot()

            logger.info(f"üöÄ –ë–æ—Ç v{BOT_VERSION} –∑–∞–ø—É—â–µ–Ω")
            logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            monitoring_task = asyncio.create_task(
                performance_monitoring_task())

            max_retries = 5
            retry_count = 0

            while retry_count < max_retries and not shutdown_event.is_set():
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è polling
                    polling_task = asyncio.create_task(
                        dp.start_polling(
                            bot,
                            polling_timeout=60,
                            skip_updates=True,
                            allowed_updates=[
                                "message", "callback_query", "chat_member"
                            ]
                        )
                    )

                    # –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è polling, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    shutdown_task = asyncio.create_task(shutdown_event.wait())
                    done, pending = await asyncio.wait(
                        [polling_task, shutdown_task],
                        return_when=asyncio.FIRST_COMPLETED
                    )

                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ pending –∑–∞–¥–∞—á–∏
                    for task in pending:
                        task.cancel()

                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if shutdown_event.is_set():
                        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                        break

                    # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
                    if polling_task in done:
                        try:
                            await polling_task
                        except Exception as e:
                            retry_count += 1
                            performance_monitor.increment_error()
                            logger.error(
                                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")

                            if retry_count < max_retries and not shutdown_event.is_set():
                                wait_time = retry_count * 10
                                logger.info(
                                    f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                                await asyncio.sleep(wait_time)
                            else:
                                logger.error(
                                    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                                break

                except Exception as e:
                    retry_count += 1
                    performance_monitor.increment_error()
                    logger.error(
                        f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")

                    if retry_count < max_retries and not shutdown_event.is_set():
                        wait_time = retry_count * 10
                        logger.info(
                            f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(wait_time)
                    else:
                        break

            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitoring_task.cancel()
            try:
                await monitoring_task
            except asyncio.CancelledError:
                pass

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            try:
                await bot.session.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")

            logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        raise


if __name__ == "__main__":
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ asyncio –¥–ª—è Windows
        if sys.platform == "win32":
            asyncio.set_event_loop_policy(
                asyncio.WindowsSelectorEventLoopPolicy())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if len(sys.argv) > 1 and sys.argv[1] == "--simple":
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logger.info("üîß –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–∂–∏–º–µ (--simple)")
            asyncio.run(main())
        else:
            # –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
            asyncio.run(main())

    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
    finally:
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
        logging.shutdown()

        # –û—á–∏—â–∞–µ–º –≤—Å–µ pending –∑–∞–¥–∞—á–∏
        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                for task in asyncio.all_tasks(loop):
                    if not task.done():
                        task.cancel()

                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–º–µ–Ω—É
                loop.run_until_complete(asyncio.sleep(0.1))

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
                if not loop.is_closed():
                    loop.close()
        except Exception:
            pass

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            import os
            if os.name == 'nt':  # Windows
                # –ù–∞ Windows –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
                os._exit(0)
        except Exception:
            pass

        print("üèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
